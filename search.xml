<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>7-2-Java-基本语法-大整数相加</title>
    <url>/2023/04/24/7-2-Java-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95-%E5%A4%A7%E6%95%B4%E6%95%B0%E7%9B%B8%E5%8A%A0/</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>有若干大整数，需要对其进行求和操作。</p>
<h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>每行输入一个字符串代表一个大整数，连续输入若干行，当某行字符为e或E时退出。</p>
<h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">42846280183517070527831839425882145521227251250327</span><br><span class="line">55121603546981200581762165212827652751691296897789</span><br><span class="line">e</span><br></pre></td></tr></table></figure>

<h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">97967883730498271109594004638709798272918548148116</span><br></pre></td></tr></table></figure>

<h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> readline = <span class="built_in">require</span>(<span class="string">&#x27;readline&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> rl = readline.<span class="title function_">createInterface</span>(&#123;</span><br><span class="line">    <span class="attr">input</span>: process.<span class="property">stdin</span>,</span><br><span class="line">    <span class="attr">output</span>: process.<span class="property">stdout</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sum = <span class="title class_">BigInt</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">rl.<span class="title function_">on</span>(<span class="string">&#x27;line&#x27;</span>, <span class="function"><span class="params">line</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!line.<span class="title function_">localeCompare</span>(<span class="string">&quot;e&quot;</span>, <span class="literal">undefined</span>, &#123; <span class="attr">sensitivity</span>: <span class="string">&quot;base&quot;</span> &#125;)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(sum.<span class="title function_">toString</span>())</span><br><span class="line">        rl.<span class="title function_">close</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        sum += <span class="title class_">BigInt</span>(line)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">sum</span> <span class="operator">=</span> BigInteger.ZERO;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNextLine()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">            <span class="keyword">if</span> (line.equalsIgnoreCase(<span class="string">&quot;e&quot;</span>)) &#123;</span><br><span class="line">                System.out.println(sum.toString());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sum = sum.add(<span class="keyword">new</span> <span class="title class_">BigInteger</span>(line));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Java</tag>
        <tag>JavaScript</tag>
        <tag>BigInt</tag>
        <tag>readline</tag>
      </tags>
  </entry>
  <entry>
    <title>Immediately Executing Function Demo</title>
    <url>/2023/04/27/Immediately%20Executing%20Function%20Demo/</url>
    <content><![CDATA[<p>The key aspect of this demo is that the utilization of an immediately executing function in JavaScript generates a fresh variable scope, which distinguishes it from <code>if</code>, <code>else</code>, and <code>while</code>. The code presented below exemplifies this fact.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> foo = <span class="number">456</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="params">_</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> foo = <span class="number">123</span></span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Output:</p>
<pre><code>456
</code></pre>
<p>Notice how the function does not reset the value of variable <code>foo</code>? Now that’s something to be mindful of!</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>Dabbling with Puppeteer</title>
    <url>/2023/04/27/Dabbling%20with%20Puppeteer/</url>
    <content><![CDATA[<p>Puppeteer is a Node.js library that provides a high-level API to control headless Chrome or Chromium browsers. It is widely used for web scraping, testing, and automation, and is an essential tool for many developers who work with web applications.</p>
<blockquote>
<p>Note that I’ll be demonstrating on ArchLinux</p>
</blockquote>
<p>Because Puppeteer is relys on Node.js, the first thing we do is create a project directory and initiate <code>npm</code>.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> puppeteer-project;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> puppeteer-project;</span><br><span class="line"></span><br><span class="line">npm init -y</span><br><span class="line"></span><br><span class="line">npm i puppeteer --save</span><br><span class="line"></span><br><span class="line">sudo pacman -S libx11 libxcomposite libxdamage libxext libxi libxtst nss freetype2 harfbuzz</span><br><span class="line"></span><br><span class="line"><span class="comment"># Puppeteer requires some additional dependencies to be installed</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Now we write our script:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim puppeteer.js</span><br></pre></td></tr></table></figure>

<p>The script should be on the lines of this template:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">&#x27;puppeteer&#x27;</span>);</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.<span class="title function_">launch</span>(&#123;</span><br><span class="line">  	<span class="attr">executablePath</span>: <span class="string">&#x27;/usr/bin/chromium&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  	<span class="comment">// We can also drop this line and instead, set an environment variable in Bash.</span></span><br><span class="line"></span><br><span class="line">  	<span class="comment">// `$ export PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium`</span></span><br><span class="line"></span><br><span class="line">  	<span class="attr">headless</span>: <span class="literal">true</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> page = <span class="keyword">await</span> browser.<span class="title function_">newPage</span>();</span><br><span class="line">  <span class="keyword">await</span> page.<span class="title function_">goto</span>(<span class="string">&#x27;https://www.example.com&#x27;</span>);</span><br><span class="line">  <span class="keyword">await</span> page.<span class="title function_">screenshot</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;example.png&#x27;</span> &#125;);</span><br><span class="line">  <span class="keyword">await</span> browser.<span class="title function_">close</span>();</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>This code will launch Chromium in headless mode and navigate to <code>https://www.example.com</code>, take a screenshot of the page, and then close the browser.</p>
<p><strong><em>More content about Puppeteer coming up!</em></strong></p>
]]></content>
      <categories>
        <category>Puppeteer</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>ArchLinux</tag>
        <tag>Headless Browser</tag>
      </tags>
  </entry>
  <entry>
    <title>Installing Puppet server on ArchLinux</title>
    <url>/2023/04/27/Installing%20Puppet%20server%20on%20ArchLinux/</url>
    <content><![CDATA[<h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><p>To install puppet server first add the upstream GPG key:</p>
<pre><code>$ gpg --fetch-keys https://yum.puppetlabs.com/RPM-GPG-KEY-puppet-20250406
</code></pre>
<div>
    Then install the <a href="https://aur.archlinux.org/packages/puppetserver"><b>puppetserver</b></a><sup>AUR</sup> package.
</div>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://aur.archlinux.org/puppetserver.git</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> puppetserver/</span><br><span class="line"></span><br><span class="line">makepkg -si</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Having questions about the <code>makepkg</code> command? Visit <a href="/2023/04/25/Running%20ArchLinux%20ARM%20in%20UTM%20on%20a%20M1%20MacBook%20Air/#yay" title="makepkg">here</a>!</p>
<div>
    Afterwards, enable and start the <b>puppetserver</b> service.
</div>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> puppetserver.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add to &quot;/etc/systemd/system/multi-user.target.wants&quot;.</span></span><br><span class="line"></span><br><span class="line">sudo systemctl start puppetserver.service</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Delete-a-key"><a href="#Delete-a-key" class="headerlink" title="Delete a key"></a>Delete a key</h3><p>List the keys in your keyring using the command <code>gpg --list-keys</code>:</p>
<pre><code>$ gpg --list-keys
/root/.gnupg/pubring.kbx
------------------------
pub   rsa4096 2019-04-08 [SC] [expires: 2025-04-06]
      D6811ED3ADEEB8441AF5AA8F4528B6CD9E61EF26
uid           [ unknown] Puppet, Inc. Release Key (Puppet, Inc. Release Key) &lt;release@puppet.com&gt;
</code></pre>
<p>For example, the key ID of the instance above is “D6811ED3ADEEB8441AF5AA8F4528B6CD9E61EF26”.</p>
<p>Delete the key using the command <code>gpg --delete-keys [key ID]</code>.</p>
<p>Note that deleting a key from your keyring will prevent you from verifying any signatures made with that key in the future. If you need to use the key again later, you will need to fetch it again using the <code>gpg --fetch-keys</code> command.</p>
<blockquote>
<p>Configuration</p>
</blockquote>
<p>The Puppet Server’s configuration files are stored in <code>/etc/puppetlabs/puppetserver/</code>.</p>
]]></content>
      <categories>
        <category>Puppet</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>ArchLinux</tag>
        <tag>Puppet</tag>
        <tag>server</tag>
        <tag>GPG key</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript Method：localeCompare</title>
    <url>/2023/04/24/JavaScript%20Method%EF%BC%9AlocaleCompare/</url>
    <content><![CDATA[<p>Lately I’ve been thinking that since Java has an equalsIgnoreCase method, JavaScript must have something similar. This is what I found: the <code>localeCompare</code> method.</p>
<h3 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">str1.<span class="title function_">localeCompare</span>(str2, [locales], [options])</span><br></pre></td></tr></table></figure>

<p><strong><em>Note: The Linux commands also has a <code>locale</code> command!</em></strong></p>
<h3 id="Available-locales"><a href="#Available-locales" class="headerlink" title="Available locales"></a>Available locales</h3><p><strong><em><code>language</code></em></strong></p>
<pre><code>&#39;en&#39;: English
&#39;fr&#39;: French
&#39;de&#39;: German
&#39;es&#39;: Spanish
&#39;ja&#39;: Japanese
&#39;zh&#39;: Chinese
&#39;ar&#39;: Arabic
&#39;ru&#39;: Russian
</code></pre>
<p>We can also use a combination of <code>language</code> and <code>region</code> subtags to specify a more specific locale. For example:</p>
<pre><code>&#39;en-US&#39;: English (United States)
&#39;fr-CA&#39;: French (Canada)
&#39;de-DE&#39;: German (Germany)
&#39;es-MX&#39;: Spanish (Mexico)
&#39;ja-JP&#39;: Japanese (Japan)
&#39;zh-CN&#39;: Chinese (China)
&#39;ar-EG&#39;: Arabic (Egypt)
&#39;ru-RU&#39;: Russian (Russia)
</code></pre>
<h3 id="Available-options"><a href="#Available-options" class="headerlink" title="Available options"></a>Available options</h3><p><strong><em><code>numeric</code></em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;60&quot;</span>.<span class="title function_">localeCompare</span>(<span class="string">&quot;40&quot;</span>, <span class="literal">undefined</span>, &#123; <span class="attr">numeric</span>: <span class="literal">true</span> &#125;)) <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;60&quot;</span>.<span class="title function_">localeCompare</span>(<span class="string">&quot;60&quot;</span>, <span class="literal">undefined</span>, &#123; <span class="attr">numeric</span>: <span class="literal">true</span> &#125;)) <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;60&quot;</span>.<span class="title function_">localeCompare</span>(<span class="string">&quot;100&quot;</span>, <span class="literal">undefined</span>, &#123; <span class="attr">numeric</span>: <span class="literal">true</span> &#125;)) <span class="comment">// -1</span></span><br></pre></td></tr></table></figure>

<p><code>numeric</code> can take one of the two values: <code>true</code> and <code>false</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;60&quot;</span>.<span class="title function_">localeCompare</span>(<span class="string">&quot;100&quot;</span>, <span class="literal">undefined</span>, &#123; <span class="attr">numeric</span>: <span class="literal">false</span> &#125;)) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<p>With <code>false</code>, both <code>60</code> and <code>100</code> are treated as normal String objects.</p>
<p><strong><em><code>sensitivity</code></em></strong></p>
<p><code>sensitivity</code> can take one of the three values: <code>base</code>, <code>accent</code>, <code>case</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;café&quot;</span>.<span class="title function_">localeCompare</span>(<span class="string">&quot;Cafe&quot;</span>, <span class="literal">undefined</span>, &#123; <span class="attr">sensitivity</span>: <span class="string">&quot;base&quot;</span> &#125;)) <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;café&quot;</span>.<span class="title function_">localeCompare</span>(<span class="string">&quot;Cafe&quot;</span>, <span class="literal">undefined</span>, &#123; <span class="attr">sensitivity</span>: <span class="string">&quot;accent&quot;</span> &#125;)) <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;café&quot;</span>.<span class="title function_">localeCompare</span>(<span class="string">&quot;Cafe&quot;</span>, <span class="literal">undefined</span>, &#123; <span class="attr">sensitivity</span>: <span class="string">&quot;case&quot;</span> &#125;)) <span class="comment">// -1</span></span><br></pre></td></tr></table></figure>

<p><strong><em><code>caseFirst</code></em></strong></p>
<p>The <code>caseFirst</code> option in the <code>localeCompare()</code> method specifies whether uppercase letters should come before or after lowercase letters in the sort order. It can take one of the following two values:</p>
<p><code>upper</code>: Sort uppercase letters before lowercase letters.</p>
<p><code>lower</code>: Sort lowercase letters before uppercase letters.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Ba&quot;</span>.<span class="title function_">localeCompare</span>(<span class="string">&quot;AB&quot;</span>, <span class="literal">undefined</span>, &#123; <span class="attr">sensitivity</span>: <span class="string">&quot;case&quot;</span> &#125;)) <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;aB&quot;</span>.<span class="title function_">localeCompare</span>(<span class="string">&quot;AB&quot;</span>, <span class="literal">undefined</span>, &#123; <span class="attr">sensitivity</span>: <span class="string">&quot;case&quot;</span> &#125;)) <span class="comment">// -1</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;aB&quot;</span>.<span class="title function_">localeCompare</span>(<span class="string">&quot;AB&quot;</span>, <span class="literal">undefined</span>, &#123; <span class="attr">sensitivity</span>: <span class="string">&quot;case&quot;</span>, <span class="attr">caseFirst</span>: <span class="string">&quot;upper&quot;</span> &#125;)) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<p><strong><em><code>ignorePunctuation</code></em></strong></p>
<p>The <code>ignorePunctuation</code> option in the <code>localeCompare()</code> method specifies whether punctuation and other symbols should be ignored during the comparison.</p>
<p>It can take one of the following two values: <code>true</code> and <code>false</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, world!&quot;</span>.<span class="title function_">localeCompare</span>(<span class="string">&quot;Hello world&quot;</span>, <span class="literal">undefined</span>, &#123; <span class="attr">ignorePunctuation</span>: <span class="literal">true</span> &#125;)) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>Methods</tag>
      </tags>
  </entry>
  <entry>
    <title>Mounting a shared folder on ArchLinux VM</title>
    <url>/2023/04/26/Mounting-a-Shared-folder-on-ArchLinux-VM/</url>
    <content><![CDATA[<p>For this tutorial, we’ll be using <strong>Samba</strong>. As for what Samba really is though, the most I can figure out from my search on Google is that Samba is a free and open-source software that allows files to be shared across Windows and Linux systems simply and easily. To be exact, it is an open-source implementation of the SMB&#x2F;CIFS protocol.</p>
<h3 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h3><h4 id="Install-smbclient-util-with-pacman"><a href="#Install-smbclient-util-with-pacman" class="headerlink" title="Install smbclient util with pacman"></a>Install <code>smbclient</code> util with <code>pacman</code></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S smbclient</span><br></pre></td></tr></table></figure>

<h4 id="Create-shared-directory"><a href="#Create-shared-directory" class="headerlink" title="Create shared directory"></a>Create shared directory</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> /home/&lt;user&gt;/share</span><br></pre></td></tr></table></figure>

<p>This directory is to be shared between the host and guest machines.</p>
<h4 id="Edit-the-Samba-configuration-file"><a href="#Edit-the-Samba-configuration-file" class="headerlink" title="Edit the Samba configuration file"></a>Edit the Samba configuration file</h4><p>Open up the configuration file for samba:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/samba/smb.conf</span><br></pre></td></tr></table></figure>

<p>Add these lines to the configuration file:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[share]</span><br><span class="line">path = /home/&lt;user&gt;/share</span><br><span class="line"><span class="built_in">read</span> only = no</span><br><span class="line">guest ok = <span class="built_in">yes</span></span><br></pre></td></tr></table></figure>

<h4 id="Create-Samba-password"><a href="#Create-Samba-password" class="headerlink" title="Create Samba password"></a>Create Samba password</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo smbpasswd -a &lt;user&gt;</span><br></pre></td></tr></table></figure>

<p>Restart the Samba service to refresh:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart smb.service</span><br></pre></td></tr></table></figure>

<h4 id="IP-Configuration"><a href="#IP-Configuration" class="headerlink" title="IP Configuration"></a>IP Configuration</h4><p>In the UTM app on your MacBook, go to the settings for the ArchLinux VM and enable the “Port Forwarding” option. Add a new rule with the following settings:</p>
<pre><code>Protocol: TCP
Host Port: 445
Guest IP: IP address of the ArchLinux VM
Guest Port: 445
</code></pre>
<p>To get Guest IP, run the following line:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@alarm ~]<span class="comment"># ip addr | grep inet</span></span><br></pre></td></tr></table></figure>

<pre><code>inet 127.0.0.1/8 scope host lo
inet6 ::1/128 scope host 
inet 192.168.65.3/24 metric 1024 brd 192.168.65.255 scope global dynamic enp0s1
inet6 fde3:e977:b4d3:5c13:e0b4:51ff:fee5:2142/64 scope global dynamic mngtmpaddr noprefixroute 
inet6 fe80::e0b4:51ff:fee5:2142/64 scope link
</code></pre>
<p>In this case, it’s <code>192.168.65.3</code>.</p>
<p>To get Host IP, run the following line:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ipconfig getifaddr en0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 10.8.189.52</span></span><br></pre></td></tr></table></figure>

<p>On your MacBook, open Finder and click “Go” &gt; “Connect to Server” (Cmd + K). </p>
<p>Enter this address: <code>smb://localhost:445/share</code></p>
<p>Enter the Samba username and password when prompted.</p>
<p>You can now access the shared directory and transfer files between the host and guest operating systems.</p>
<h3 id="Mount-mnt-share"><a href="#Mount-mnt-share" class="headerlink" title="Mount /mnt/share"></a>Mount <code>/mnt/share</code></h3><p>Normally during the boot-up process of our machines, the mounting up of disks and folders are done for us. However, I keep getting this error telling me:</p>
<pre><code>[FAILED] Failed to mount /mnt/share.
</code></pre>
<p>So I have to mount this directory myself, by running:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mount -t cifs //localhost/share /mnt/share -o user=&lt;Samba username&gt;,password=&lt;Samba password&gt;</span><br></pre></td></tr></table></figure>

<p>This command mounts a Samba share located on the local machine (localhost) to a directory (&#x2F;mnt&#x2F;share) using the Common Internet File System (CIFS) protocol.</p>
<p>The <code>-o</code> option specifies additional mount options, in this case, it provides the Samba username and password to authenticate and access the share.</p>
<hr>
<h4 id="Enable-Samba-service"><a href="#Enable-Samba-service" class="headerlink" title="Enable Samba service"></a>Enable Samba service</h4><p>But before we run this command, we have to ensure that Samba service on the ArchLinux VM is up and running.</p>
<p>Check that the Samba service is running on the ArchLinux VM:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl status smb.service</span><br></pre></td></tr></table></figure>

<p>If the service is not running, start it using the following command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl start smb.service</span><br></pre></td></tr></table></figure>

<p>To automatically start the Samba service on boot, you can enable the <code>smb.service</code> unit running the following command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> smb.service</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong><em>Make sure that the Samba username and password are correct.</em></strong></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">smbclient //localhost/share -U mccranky</span><br></pre></td></tr></table></figure>

<p>Restart the ArchLinux VM to test that the Samba service starts automatically:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl reboot</span><br></pre></td></tr></table></figure>

<hr>
<p>To check whether <code>/mnt/share</code> has been successfully mounted, run the following line:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mount | grep /mnt/share</span><br></pre></td></tr></table></figure>

<p>If the directory is mounted, we should be able to see something similar to this:</p>
<pre><code>//localhost/share on /mnt/share type cifs (rw,relatime,vers=3.1.1,cache=strict,username=mccranky,
uid=0,noforceuid,gid=0,noforcegid,addr=127.0.0.1,file_mode=0755,dir_mode=0755,soft,nounix,serveri
no,mapposix,rsize=4194304,wsize=4194304,bsize=1048576,echo_interval=60,actimeo=1,closetimeo=1,use
r=mccranky)
</code></pre>
<h4 id="Mount-mnt-share-on-startup"><a href="#Mount-mnt-share-on-startup" class="headerlink" title="Mount /mnt/share on startup"></a>Mount <code>/mnt/share</code> on startup</h4><p>To automatically mount the Samba shared directory on boot, you can add an entry to the <code>/etc/fstab</code> file.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/fstab</span><br></pre></td></tr></table></figure>

<p>Then append the following line to the end of the file:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//localhost/share /mnt/share cifs user=mccranky,password=Rogue12 0 0</span><br></pre></td></tr></table></figure>

<p>However, it seems that our new input comflicts with this line:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">share /mnt/share 9p trans=virtio,nofail 0 0</span><br></pre></td></tr></table></figure>

<p>The reason for this is because our new line mounts a CIFS file system from <code>localhost</code> onto the mount point <code>/mnt/share</code>, using the username <code>mccranky</code> and password <code>Rogue12</code>.</p>
<p>The old line mounts a 9p file system onto the same mount point <code>/mnt/share</code>, using the virtio transport and the nofail option.</p>
<p>Since our old entry gave us much headache, I’ll just swap it for the new one. :)</p>
<p>Let’s test the mount by running the following command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mount -a</span><br></pre></td></tr></table></figure>

<p>This command will attempt to mount all entries in the <code>/etc/fstab</code> file. If there are any errors, it will display them in the terminal.</p>
<p>Now we run <code>sudo systemctl reboot</code> to see if everything has been resolved at boot-up. There should be no more failures.</p>
<h3 id="Rollback"><a href="#Rollback" class="headerlink" title="Rollback"></a>Rollback</h3><h4 id="Disable-Samba-service"><a href="#Disable-Samba-service" class="headerlink" title="Disable Samba service"></a>Disable Samba service</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl stop smb.service</span><br><span class="line"></span><br><span class="line">sudo systemctl <span class="built_in">disable</span> smb.service</span><br><span class="line"></span><br><span class="line">sudo pacman -R samba</span><br><span class="line"></span><br><span class="line">sudo <span class="built_in">rm</span> -rf /etc/samba</span><br><span class="line">sudo <span class="built_in">rm</span> -rf /var/cache/samba</span><br><span class="line">sudo <span class="built_in">rm</span> -rf /var/lib/samba</span><br><span class="line"></span><br><span class="line">sudo userdel -r samba</span><br><span class="line">sudo groupdel samba</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Unmount-mnt-share"><a href="#Unmount-mnt-share" class="headerlink" title="Unmount /mnt/share"></a>Unmount <code>/mnt/share</code></h4><p>Edit the Samba configuration file <code>/etc/samba/smb.conf</code> using a text editor:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/samba/smb.conf</span><br></pre></td></tr></table></figure>

<p>Find the section that defines the <code>/mnt/share</code> share. It should look something like this:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[mnt]</span><br><span class="line">   path = /mnt/share</span><br><span class="line">   <span class="built_in">read</span> only = no</span><br><span class="line">   guest ok = <span class="built_in">yes</span></span><br></pre></td></tr></table></figure>

<p>Remove the entire section, then restart the Samba service:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl start smb.service</span><br></pre></td></tr></table></figure>

<p>The <code>/mnt/share</code> share should now be removed from Samba on Arch Linux.</p>
<h4 id="Revoke-Samba-password"><a href="#Revoke-Samba-password" class="headerlink" title="Revoke Samba password"></a>Revoke Samba password</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo smbpasswd -x &lt;user&gt;</span><br></pre></td></tr></table></figure>

<p>This will remove the user’s password from the Samba password database, effectively undoing the <code>sudo smbpasswd -a &lt;user&gt;</code> command.</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>ArchLinux</category>
      </categories>
      <tags>
        <tag>ArchLinux</tag>
        <tag>UTM</tag>
        <tag>Virtual Machine</tag>
      </tags>
  </entry>
  <entry>
    <title>Pointers</title>
    <url>/2023/04/29/Pointers/</url>
    <content><![CDATA[<h3 id="Array-of-pointers-to-ints"><a href="#Array-of-pointers-to-ints" class="headerlink" title="Array of pointers to ints"></a>Array of pointers to ints</h3><p><strong>Code:</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span>* ap[<span class="number">15</span>];</span><br><span class="line">    <span class="type">int</span> ai[<span class="number">15</span>] = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; ++i) &#123;</span><br><span class="line">        ai[i] = i; </span><br><span class="line">        ap[i] = &amp;ai[i];</span><br><span class="line">        std::cout &lt;&lt; *ap[i] &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; ap[i]&lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Console:</strong></p>
<pre><code>0 0x16d296d14
1 0x16d296d18
2 0x16d296d1c
3 0x16d296d20
4 0x16d296d24
5 0x16d296d28
6 0x16d296d2c
7 0x16d296d30
8 0x16d296d34
9 0x16d296d38
10 0x16d296d3c
11 0x16d296d40
12 0x16d296d44
13 0x16d296d48
14 0x16d296d4c
</code></pre>
<h3 id="Pointer-to-an-array-of-ints"><a href="#Pointer-to-an-array-of-ints" class="headerlink" title="Pointer to an array of ints"></a>Pointer to an array of ints</h3><p><strong>Code:</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ai[<span class="number">15</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++) ai[i] = i;</span><br><span class="line">    <span class="built_in">int</span> (*ptr)[] = &amp;ai;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++) &#123;</span><br><span class="line">        std::cout &lt;&lt; (*ptr)[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong><em>Console</em></strong></p>
<pre><code>0 1 2 3 4 5 6 7 8 9 10 11 12 13 14
</code></pre>
<blockquote>
<p><strong><em>Notes</em></strong></p>
</blockquote>
<ul>
<li><p>The parentheses around <code>*ptr</code> are necessary because the <code>[]</code> operator has<br>  higher precedence than the <code>*</code> operator. Without the parentheses, the<br>  declaration would be parsed as an array of pointers to int, like int<br>  <code>*ptr[15]</code>.</p>
</li>
<li><p>When I took the address of the array, I got a pointer to the first element<br>  of the array. However, the pointer itself does not contain any information<br>  about the size of the array.</p>
</li>
</ul>
<h3 id="Pointer-to-function-taking-a-string-argument"><a href="#Pointer-to-function-taking-a-string-argument" class="headerlink" title="Pointer to function taking a string argument;"></a>Pointer to function taking a string argument;</h3><h4 id="returns-an-string"><a href="#returns-an-string" class="headerlink" title="returns an string"></a>returns an string</h4><p><strong>Code:</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">replaceX</span><span class="params">(std::string *str, std::string x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">size_t</span> pos = (*str).<span class="built_in">find</span>(<span class="string">&quot;$&#123;x&#125;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (pos != std::string::npos)</span><br><span class="line">        (*str).<span class="built_in">replace</span>(pos, <span class="number">4</span>, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::string <span class="title">foo</span><span class="params">(std::string x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::string str = <span class="string">&quot;hello this is $&#123;x&#125;&quot;</span>;</span><br><span class="line">    <span class="built_in">replaceX</span>(&amp;str, x);</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::<span class="built_in">string</span> (*fp)(std::string) = &amp;foo;</span><br><span class="line">    std::cout &lt;&lt; (*fp)(<span class="string">&quot;foo&quot;</span>) &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; (*fp)(<span class="string">&quot;bar&quot;</span>) &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Console:</strong></p>
<pre><code>hello this is foo
hello this is bar
</code></pre>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>Positional Parameters</title>
    <url>/2023/04/29/Positional%20Parameters/</url>
    <content><![CDATA[<p>In Bash, positional parameters are special variables that hold the arguments passed to a script or function. The positional parameters are numbered from <code>0</code> to <code>9</code>, where <code>$0</code> holds the name of the script or function, and <code>$1</code> through <code>$9</code> hold the first through ninth arguments, respectively.</p>
<p><code>$@</code> and <code>$*</code> both hold all the arguments passed to the script. Note that <code>$@</code> is an array-like variable that holds all the positional parameters as <em>separate elements</em>, while <code>$*</code> is another variable that holds all the positional parameters as <em>a single string</em>.</p>
<p>Here’s an example:</p>
<pre><code>#!/bin/bash

#!/bin/bash

echo &quot;Script Name: $0&quot;
echo &quot;First Arg: $1&quot;
echo &quot;Second Arg: $2&quot;
echo &quot;All args (arr): $@&quot;
echo &quot;All args (str): $*&quot;
</code></pre>
<p>Now let’s run the script with three arguments:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> u+x ./script <span class="comment"># Grant execution privilege for user</span></span><br><span class="line"></span><br><span class="line">./script a b c</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>The output should be something like this:</p>
<pre><code>Script Name: ./script.sh
First Arg: a
Second Arg: b
All args (arr): a b c
All args (str): a b c
</code></pre>
]]></content>
      <categories>
        <category>Bash</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Bash</tag>
      </tags>
  </entry>
  <entry>
    <title>Initialize shared directory with SPICE WebDAV</title>
    <url>/2023/04/26/Initialize%20shared%20directory%20with%20SPICE%20WebDAV/</url>
    <content><![CDATA[<h3 id="Install-Dependencies"><a href="#Install-Dependencies" class="headerlink" title="Install Dependencies"></a>Install Dependencies</h3><h4 id="SPICE-guest-tools"><a href="#SPICE-guest-tools" class="headerlink" title="SPICE guest tools"></a><em><code>SPICE guest tools</code></em></h4><p>See <a href="/2023/04/25/Running%20ArchLinux%20ARM%20in%20UTM%20on%20a%20M1%20MacBook%20Air/#SPICE-guest-tools"><code>SPICE guest tools</code></a></p>
<h4 id="SPICE-WebDAV"><a href="#SPICE-WebDAV" class="headerlink" title="SPICE WebDAV"></a><em><code>SPICE WebDAV</code></em></h4><p>SPICE WebDAV is required for <a href="https://docs.getutm.app/settings-qemu/sharing/#spice-webdav" title="QEMU directory sharing">QEMU directory sharing</a> as an alternative to VirtFS.</p>
<p>Since we’re on ArchLinux, we should run the following command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S phodav</span><br></pre></td></tr></table></figure>

<p>Now we should want to visit the shared directory.</p>
<p>Normally, it is exposed as a WebDAV mount on the guest’s localhost (typically on port 9843).</p>
<p>To access it, we need a browser.</p>
<h3 id="Firefox"><a href="#Firefox" class="headerlink" title="Firefox"></a>Firefox</h3><p>I don’t have one yet, so I’ll Install Firefox via <a href="/2023/04/25/Running%20ArchLinux%20ARM%20in%20UTM%20on%20a%20M1%20MacBook%20Air/#yay"><code>yay</code></a>.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yay -S firefox</span><br></pre></td></tr></table></figure>

<p>Before we move on, let’s configure the <code>DISPLAY</code> environment variable first. Again, I need to install one:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S xorg xorg-xinit xfce4</span><br><span class="line"></span><br><span class="line"><span class="comment"># Once installation is complete, `reboot` and log-back-in</span></span><br></pre></td></tr></table></figure>

<p>Before we proceed, make sure to check the following conditions:</p>
<blockquote>
<p>X Window System is actually running: You can start the X Window System by running the command <code>startx</code> in a terminal window.</p>
</blockquote>
<blockquote>
<p>You have permission to access the X Window System: You may need to add your user account to the <code>video</code> group by running the command <code>sudo usermod -aG video &lt;username&gt;</code>.</p>
</blockquote>
<blockquote>
<p>X Window System is configured to allow remote connections: You may need to edit the <code>/etc/X11/xinit/xserverrc</code> file to include the <code>-listen tcp</code> option. For example, you can add the line <code>exec /usr/bin/X -listen tcp</code> to the file.</p>
</blockquote>
<hr>
<p>We may face some problems when we run <code>startx</code> because X server requires some sort of display device or screen so that it can display graphical output, and since ArchLinux is text-based, we’ll have to go through a few extra steps.</p>
<ul>
<li><p>Run <code>sudo pacman -S xf86-video-fbdev</code> to install the <code>xf86-video-fbdev</code> package. This package provides a generic framebuffer driver that can be used in place of a specific display driver.</p>
</li>
<li><p>Edit the <code>/etc/X11/xorg.conf.d/10-monitor.conf</code> file to specify the <code>fbdev</code> driver. We can do this by adding the following lines to the file:</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Section <span class="string">&quot;Device&quot;</span></span><br><span class="line">    Identifier <span class="string">&quot;fbdev&quot;</span></span><br><span class="line">    Driver <span class="string">&quot;fbdev&quot;</span></span><br><span class="line">EndSection</span><br></pre></td></tr></table></figure>

<p>That should do the trick when we run <code>startx</code> again.</p>
<p>If the X server still fails to start, you may need to investigate further by checking the <code>/var/log/Xorg.0.log</code> file for additional information about the error.</p>
<hr>
<p>After double-checking the conditions listed above, we can now run the command <code>export DISPLAY=:0</code> to set the display environment variable to the default value for the X Window System.</p>
<p>At last we launch Firefox and navigate to <code>http://127.0.0.1:9843</code>.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firefox http://127.0.0.1:9843</span><br></pre></td></tr></table></figure>

<p>We can also try running Firefox with the <code>--no-remote</code> option. This option tells Firefox to open a new instance of the browser, rather than connecting to an existing instance.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firefox --no-remote http://127.0.0.1:9843</span><br></pre></td></tr></table></figure>

<p>If the <code>SPICE WebDAV</code> service is running correctly, you should be able to see the page in the Firefox browser window.</p>
<h3 id="Headless-browser"><a href="#Headless-browser" class="headerlink" title="Headless browser"></a>Headless browser</h3><h4 id="Puppeteer"><a href="#Puppeteer" class="headerlink" title="Puppeteer"></a>Puppeteer</h4><p>See <a href="/2023/04/27/Dabbling%20with%20Puppeteer/">here</a></p>
<h4 id="i2pdbrowser"><a href="#i2pdbrowser" class="headerlink" title="i2pdbrowser"></a>i2pdbrowser</h4><p>Clone this repo:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/PurpleI2P/i2pdbrowser.git</span><br></pre></td></tr></table></figure>

<p>Navigate to the README.md file for more information</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>ArchLinux</category>
      </categories>
  </entry>
  <entry>
    <title>Dead Cells：Unlocking Daily Challenge blueprints</title>
    <url>/2023/05/03/Dead%20Cells%EF%BC%9AUnlocking%20Daily%20Challenge%20blueprints/</url>
    <content><![CDATA[<p>The Daily Challenge mode boasts a significant player base, even compared to other popular modes, and offers several exclusive weapons to boot. However, this is bad news for us freeloaders who, through various means, gained access to the game without ever paying the publisher a single cent. Some may consider piracy bad practice, but to be honest, I’m broke as f*ck.</p>
<p>Since we can’t do the challenge runs like the normal person would, I find it not much of a stretch to hack the game a bit further.</p>
<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>The approach we’re taking is to assign the blueprints to a chosen enemy. Naturally we’d want to assign it to an enemy we frequently run into and have a decent drop rate. It so happens that the zombie fits our description perfectly.</p>
<p>Let us have a look at the relevant part of its JSON description:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Zombie&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;score&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;maxPerRoom&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;canBeElite&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;glowInnerColor&quot;</span><span class="punctuation">:</span> <span class="number">11197250</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;volteDelay&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;flesh1&quot;</span><span class="punctuation">:</span> <span class="number">5669211</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;flesh2&quot;</span><span class="punctuation">:</span> <span class="number">12303527</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;pfCost&quot;</span><span class="punctuation">:</span> <span class="number">0.5</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;blueprints&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">	<span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;item&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HorizontalTurret&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;rarity&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Rare&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;minDifficulty&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;item&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Bleeder&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;rarity&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Always&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;minDifficulty&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;rarity&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Rare&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;minDifficulty&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;item&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PrisonerBobby&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<p><code>Bleeder</code> is the internal name for <code>Blood Sword</code>, which is typically the first blueprint obtained by Dead Cells players on their initial run. As such, it can be readily exchanged for an item of our preference.</p>
<div style="display: block; margin-left: auto; margin-right: auto; text-align: center; font-size: 1rem;">

<p><img src="/2023/05/03/Dead%20Cells%EF%BC%9AUnlocking%20Daily%20Challenge%20blueprints/images/Blood%20Sword.png" alt="Blood Sword" title="Blood Sword"></p>
<p><span>Blood Sword</span></p>
</div>

<h4 id="Targets"><a href="#Targets" class="headerlink" title="Targets:"></a>Targets:</h4><ol>
<li><em>Swift Sword</em> (internal name <code>SpeedBlade</code>) - first run</li>
<li><em>Lacerating Aura</em> (internal name <code>DamageAura</code>) - 5th run</li>
<li><em>Meat Skewer</em> (internal name <code>DashSword</code>) - 10th run</li>
</ol>
<p>Visit <a href="https://deadcells.fandom.com/wiki/Dead_Cells_Wiki">the official wiki page</a> for more information!</p>
<h3 id="CellPacker"><a href="#CellPacker" class="headerlink" title="CellPacker"></a>CellPacker</h3><p>I use CellPacker to extract the <code>data.cdb</code> file so as to avoid having to read from the hexdump. It is a lot more comfortable to inspect an formatted JSON file!</p>
<div style="display: block; margin-left: auto; margin-right: auto; text-align: center; font-size: 1rem;">

<p><img src="/2023/05/03/Dead%20Cells%EF%BC%9AUnlocking%20Daily%20Challenge%20blueprints/images/CellPacker.png" alt="CellPacker" title="CellPacker"></p>
<p><span>CellPacker</span></p>
</div>

<p>We <em>can</em> open CellPacker by double-clicking <code>CellPacker.jar</code>, however I suggest running the following command to avoid headaches:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar /path/to/CellPacker.jar</span><br></pre></td></tr></table></figure>

<p>GitHub Repo: <a href="https://github.com/ReBuilders101/CellPacker" title="ReBuilders101/CellPacker Repo">ReBuilders101&#x2F;CellPacker</a></p>
<p>Click <a href="https://github.com/ReBuilders101/CellPacker/raw/master/release/CellPacker.jar" title="CellPacker.jar">here</a> to install <code>CellPacker.jar</code>.</p>
<h3 id="res-pak"><a href="#res-pak" class="headerlink" title="res.pak"></a><em><code>res.pak</code></em></h3><p>As the name suggests, the <code>res.pak</code> is the resource pack for the game itself and contains every aspect of what the graphics and cutscenes require to load. It also contains the <code>json</code> data files which store the underlying logic behind the interactions in the game.</p>
<p>To hack it, we need a hexdump editor. I use <code>ghex</code> because it’s fairly simple and easy to use. We can install it on our MacBook via Homebrew, using the following command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install ghex</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong><em>Note:</em></strong><br>Before we begin the actual editing process, make sure you have a copy of your game saves and the resource pack we’re editing on. This is in case we make a mistake and corrupt the files.</p>
</blockquote>
<h3 id="ghex"><a href="#ghex" class="headerlink" title="ghex"></a><em><code>ghex</code></em></h3><p>Run <code>ghex</code> in Terminal and open <code>res.pak</code>. Locate <code>Bleeder</code> and replace it with the internal name of any of the three daily challenge blueprints.</p>
<div style="display: block; margin-left: auto; margin-right: auto; text-align: center; font-size: 1rem;">

<p><img src="/2023/05/03/Dead%20Cells%EF%BC%9AUnlocking%20Daily%20Challenge%20blueprints/images/Before.png" alt="Before" title="Before"></p>
</div>

<p>Please note that the resulting file must remain the same size as the original. Making significant changes will only complicate matters. For instance, <code>Bleeder</code> has 7 characters, while <code>SpeedBlade</code> and <code>DamageAura</code> have 10, and <code>DashSword</code> has 9. To address this discrepancy, I reduced the length of “Zombie” by the difference. Here’s an example:</p>
<div style="display: block; margin-left: auto; margin-right: auto; text-align: center; font-size: 1rem;">

<p><img src="/2023/05/03/Dead%20Cells%EF%BC%9AUnlocking%20Daily%20Challenge%20blueprints/images/After.png" alt="After" title="After"></p>
</div>

<hr>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul>
<li>Sebadorn’s Blog: <a href="https://sebadorn.de/2021/06/28/dead-cells-unlocking-the-daily-challenge-blueprints-in-the-bugged-linux-gog-version" title="Unlocking the Daily Challenge blueprints in the bugged Linux GOG version">2021.06.28</a></li>
</ul>
]]></content>
      <categories>
        <category>Games</category>
      </categories>
      <tags>
        <tag>Dead Cells</tag>
      </tags>
  </entry>
  <entry>
    <title>[Fix] Failed to mount /mnt/share</title>
    <url>/2023/04/27/%5BFix%5D%20Failed%20to%20mount%20:mnt:share/</url>
    <content><![CDATA[<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Our fix to the problem is to remove <code>/mnt/share</code> entirely and mount something else in its place.</p>
<p>This is the portion of the startup process which showed the error:</p>
<pre><code>[FAILED] Failed to mount /mnt/share.
See &#39;systemctl status mnt-share.mount&#39; for details
</code></pre>
<p>By the way, this post is for those who followed <a href="/2023/04/26/Mounting-a-Shared-folder-on-ArchLinux-VM/#Rollback">my last tutorial</a> on using Samba service to mount a shared directory on ArchLinux VM.</p>
<h3 id="Check-mount-unit-status"><a href="#Check-mount-unit-status" class="headerlink" title="Check mount unit status"></a>Check mount unit status</h3><p>We’ll start by following the instruction to check the status of the mount unit by running the suggested command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl status mnt-share.mount</span><br></pre></td></tr></table></figure>

<p>This will give us more information about the specific error that occurred.</p>
<pre><code>Warning: The unit file, source configuration file or drop-ins of mnt-share.moun&gt;
x mnt-share.mount - /mnt/share
     Loaded: loaded (/etc/fstab; generated)
     Active: failed (Result: exit-code) since Thu 2023-04-27 02:45:46 UTC; 40mi&gt;
      Where: /mnt/share
       What: //localhost/share
       Docs: man:fstab(5)
             man:systemd-fstab-generator(8)
        CPU: 28ms

Apr 27 02:45:46 alarm systemd[1]: Mounting /mnt/share...
Apr 27 02:45:46 alarm mount[379]: mount error(111): could not connect to ::1mou&gt;
Apr 27 02:45:46 alarm systemd[1]: mnt-share.mount: Mount process exited, code=e&gt;
Apr 27 02:45:46 alarm systemd[1]: mnt-share.mount: Failed with result &#39;exit-cod&gt;
Apr 27 02:45:46 alarm systemd[1]: Failed to mount /mnt/share.
</code></pre>
<h3 id="Side-Content"><a href="#Side-Content" class="headerlink" title="Side Content"></a>Side Content</h3><h4 id="Check-file-system-properties"><a href="#Check-file-system-properties" class="headerlink" title="Check file system properties"></a>Check file system properties</h4><p>Since we’ve decided to remove the mount <code>/mnt/share</code> instead of trying to fix it, we shall proceed to learn a little about how to mount a disk. For instance, if we want to mount an NTFS file system and ensure that the file system is accessible and error-free, we can use the following command to check it for errors:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S ntfs-3g</span><br><span class="line"></span><br><span class="line"><span class="comment">#  Install the `ntfs-3g` package which provides the `ntfsfix` tool.</span></span><br><span class="line"></span><br><span class="line">sudo ntfsfix /dev/sda1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Replace `/dev/sda1` with the appropriate device and partition.</span></span><br></pre></td></tr></table></figure>

<p>If the virtual hard disk has multiple partitions, we’ll need to determine which partition contains the NTFS file system we want to mount. Oftentimes we use the <code>lsblk</code> command to list the available storage devices and their partitions, and the <code>blkid</code> command to list the UUIDs of the partitions.</p>
<pre><code>$ lsblk
NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTS
sr0     11:0    1 1024M  0 rom  
vda    253:0    0  9.8G  0 disk 
|-vda1 253:1    0  200M  0 part /boot
`-vda2 253:2    0  9.6G  0 part /
</code></pre>
<p>In my case, the virtual machine has a single virtual hard disk, which is identified as <code>/dev/vda</code>. This virtual hard disk has two partitions, <code>/dev/vda1</code> and <code>/dev/vda2</code>, which are mounted at <code>/boot</code> and <code>/</code>, respectively.</p>
<p><code>/dev/vda1</code> is a 200MB partition formatted as a Linux file system such as <code>ext4</code> or <code>xfs</code>, and contains the kernel and other boot files.</p>
<p><code>/dev/vda2</code> is a 9.6GB partition also formatted as a Linux file system, and contains the root file system for the Arch Linux operating system.</p>
<h4 id="Mount-NTFS-file-system"><a href="#Mount-NTFS-file-system" class="headerlink" title="Mount NTFS file system"></a>Mount NTFS file system</h4><p>If we want to mount an additional NTFS file system on our virtual machine, we can create a new directory to use as the mount point, such as <code>/mnt/ntfs</code>, and then add an entry to the <code>/etc/fstab</code> file to mount the NTFS file system at that mount point.</p>
<p>For example, if the NTFS file system is located on <code>/dev/vda3</code>, we can add the following line to the <code>/etc/fstab</code> file:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/dev/vda3 /mnt/ntfs ntfs-3g defaults 0 0</span><br></pre></td></tr></table></figure>

<p>Or if you’ve run <code>blkid</code> and looked up the UUID of the file system you wanted to mount, you can also swap the line above for the following one:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">UUID=12345678-1234-1234-1234-1234567890ab /mnt/ntfs ntfs-3g defaults 0 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># Pretend for a sec that the UUID of `/dev/vda3` is &quot;12345678-1234-1234-1234-1234567890ab&quot;</span></span><br></pre></td></tr></table></figure>

<p>After adding the entry to the <code>/etc/fstab</code> file, we need to run <code>sudo mount -a</code>. This should mount the NTFS file system at the specified mount point, and the mount point should be automatically mounted at boot time.</p>
<h4 id="Remove-Samba-entries"><a href="#Remove-Samba-entries" class="headerlink" title="Remove Samba entries"></a>Remove Samba entries</h4><p>Edit Samba’s configuration file <code>/etc/samba/smb.conf</code> and remove everything in the <code>[mnt]</code> field.</p>
<p>Then, navigate to <code>/etc/fstab</code> and comment out anything associated with <code>/mnt/share</code>:</p>
<pre><code># share /mnt/share 9p trans=virtio,nofail 0 0
# //localhost/share /mnt/share cifs user=mccranky,password=Rogue12 0 0
</code></pre>
<p>Since we’ve already removed Samba service on our machine, we have no need of checking whether if the mount options specified in the mount unit are correct. But if you haven’t removed it yet, feel free to edit the mount unit file located at <code>/etc/systemd/system/mnt-share.mount</code> and modify the mount options.</p>
<p>Remove the mount unit for <code>/mnt/share</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">rm</span> /etc/systemd/system/mnt-share.mount</span><br></pre></td></tr></table></figure>

<p>Reload the systemd daemon to ensure that the changes take effect:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure>

<p>When we check the status of <code>mnt-share.mount</code>, we should get:</p>
<pre><code> $ sudo systemctl status mnt-share.mount
x mnt-share.mount
     Loaded: not-found (Reason: Unit mnt-share.mount not found.)
     Active: failed (Result: exit-code) since Thu 2023-04-27 02:45:46 UTC; 1h 5&gt;
        CPU: 28ms

Apr 27 02:45:46 alarm systemd[1]: Mounting /mnt/share...
Apr 27 02:45:46 alarm mount[379]: mount error(111): could not connect to ::1mou&gt;
Apr 27 02:45:46 alarm systemd[1]: mnt-share.mount: Mount process exited, code=e&gt;
Apr 27 02:45:46 alarm systemd[1]: mnt-share.mount: Failed with result &#39;exit-cod&gt;
Apr 27 02:45:46 alarm systemd[1]: Failed to mount /mnt/share.
</code></pre>
<p>Last we can finally run <code>sudo rm -r /mnt/share</code> to remove <code>/mnt/share</code> from our machine.</p>
<p>Perfect! Now when we <code>reboot</code> again we should receive no errors.</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>ArchLinux</category>
      </categories>
      <tags>
        <tag>ArchLinux</tag>
        <tag>Virtual Machine</tag>
        <tag>Issue</tag>
      </tags>
  </entry>
  <entry>
    <title>The Shanghai Lockdown Diary</title>
    <url>/2023/05/05/The%20Shanghai%20Lockdown%20Diary/</url>
    <content><![CDATA[<p>A late addition to the stack, but by all accounts no less authentic. This is a real account of what transpired in Shanghai during the great lockdown. I, for one, was away at the time, locked up at school in a different city. Nonetheless, ripples of the cataclysmic effects had reached me in that northern coast-lined city, sending waves of shock and grief, piercing my heart like daggers.</p>
<p>My mom’s account of those three months is a testament to her talent with words and positive outlook on life in general. She describes the despair and hopelessness that consumed many during that time, but also the resilience and strength of the human spirit. Her words paint a vivid picture of what life was like during the lockdown, and the following account is for anyone interested in gaining a deeper understanding of this human experience.</p>
<p>2022年4月8日，是丈夫和我因上海疫情在家禁足的第十一天。</p>
<p>微信群每天都有几百上千条信息：朝阳群众雪亮的双眼把偷溜下楼的人拍照发群，让其 “见光死”，果然后面几天下楼溜达的人几乎绝迹；把各区发放的食品发群，让群众们点评到底哪个区更“豪横”？将各种荒唐离谱的防疫搞笑视频发群，对其极尽调侃之能事；最重要的是，街道居委的各类通知也由楼组长发布在群里，实施无漏洞的网格化管理。每天每日每个楼洞排着队整齐划一去做核酸检测，真乃“威武之师”也！</p>
<p>随着封控天数的增加，每家每户存粮逐渐耗尽。微信群里搞笑调侃的少了，群情激昂点评时事的少了，取而代之的是各种团购群组。从米面油蔬菜水果到婴儿奶粉纸尿裤，应有尽有。此时此刻，没有什么比一桶油一盒鸡蛋更重要的了。也有幸运儿在群里炫耀自己在各类APP上拼手速抢到的食物图片，普普通通的一块奶油蛋糕就足以让人垂涎欲滴。望着每日重复的食物和日渐的清空冰箱，我有点心动了。</p>
<p>当晚，我就在手机上下载了四个外卖应用：美团、叮咚买菜、每日优鲜、盒马。先看美团，发现“你所在的小区不在配送范围”。再看每日优鲜，很多东西是“缺货”，好不容易找到有货的，鸡蛋10个29.8元，狠狠心把它加入购物车，点击购买时，发现仍然需要在早上六点抢，当下不能生成订单，我如释重负，毫不犹豫将这“绿色有机”的鸡蛋删除了。叮咚买菜、盒马鲜生也都是需要在早上六点拼手速抢下单，浏览了一遍，东西普遍价格高，也谈不到质优，本就抱着试试看心态的我干脆放弃了。</p>
<p>回过来审视我自己的情况：目前家中存粮还够吃，挨饿是肯定不会的。这得益于我的一个好习惯：经常清点家中存货，一旦缺少，马上补足三个月的量。2020年武汉疫情时，由于对病毒的无知而产生的恐惧，我有过大半个月没有下楼的经历，一切全靠网购，且放足了余量。现在看来，未雨绸缪，广积粮是必要的。</p>
<p>如今，八旬老父老母在故乡身体健康，自强自立的两位老人把自己的生活安排得妥妥帖帖，不要子女操半点心；儿子离开上海在大学正常地学习生活，为着自己的目标在每天努力；海外的家人们安居乐业，捷报频传。身无后顾之忧的我俩一身轻松：我精打细算烧菜做饭，丈夫风花雪月吟诗作对，禁足的日子过得并不乏味且充满诗意。</p>
<p>惟愿疫情的阴霾尽快散去，我爱的家人们能很快相聚，上海重现东方明珠的风采！</p>
<hr>
<p>On April 8th, 2022, it was the eleventh day of being confined at home in Shanghai due to the pandemic. Every day, there were hundreds or even thousands of messages in our WeChat groups. Some groups had photos of people sneaking out of their homes, which were then shared to shame them. This resulted in fewer people sneaking out in the following days. Other groups shared information about food distribution in different districts, and we would compare which district had better supplies. There were also many funny videos related to the pandemic that were shared, which made us laugh and helped to relieve some of the stress.</p>
<p>As the days went by, our food supplies began to dwindle. The funny videos and discussions about current events became less frequent in the groups, and were replaced by various group-buying options. Everything from rice, noodles, oil, vegetables, fruits, to baby formula and diapers were available. At this time, nothing was more important than having a bucket of oil and a box of eggs. Some lucky people would show off the food they had managed to buy from various apps, and even a simple piece of cake would make us drool.</p>
<p>That night, I downloaded four food delivery apps on my phone: Meituan, Dingdong Maicai, MissFresh, and Hema. I checked Meituan first, but my neighborhood was not within their delivery range. Then I tried MissFresh, but many items were out of stock. I finally found eggs, but they were priced at 29.8 yuan for a pack of 10. When I tried to purchase them, I found out that I still needed to compete with others at 6am to place my order. I felt relieved that I didn’t have to buy them and deleted them from my cart. Dingdong Maicai and Hema also required me to compete with others at 6am to place my order, and the prices were generally high with no guarantee of quality. I decided to give up on them altogether.</p>
<p>Looking back at my situation, I realized that we still had enough food to eat, and we wouldn’t go hungry. This was thanks to my good habit of regularly checking our food supplies and stocking up on a three-month supply when we were running low. During the Wuhan pandemic in 2020, I was afraid of the virus and didn’t leave my home for almost two weeks. All of our supplies were ordered online and we had extra just in case. Now, it’s clear that preparing ahead of time and stocking up on food is necessary.</p>
<p>Currently, my elderly parents are healthy and living in their hometown, and they are self-sufficient and don’t require any assistance from their children. My son is away at university, working hard towards his goals, and my family members who live abroad are doing well. With no worries, my husband and I are enjoying our time at home during the lockdown. I cook and budget carefully, while my husband writes poetry and enjoys his hobbies. Although we are confined to our home, it’s not boring and we find joy in simple things.</p>
<p>We hope that the pandemic will soon be over, and that we can be reunited with our loved ones. We also hope that Shanghai can once again thrive and shine like the Oriental Pearl it is.</p>
]]></content>
      <tags>
        <tag>Life</tag>
      </tags>
  </entry>
  <entry>
    <title>`inpath`</title>
    <url>/2023/04/29/%60inpath%60/</url>
    <content><![CDATA[<p>Coding along with the book <em>Wicked Cool Shell Scripts- 101 Scripts for Linux, OS X, and UNIX Systems</em>.</p>
<p>This is the script from Page 11:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">in_path</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">        cmd=<span class="variable">$1</span></span><br><span class="line">        ourpath=<span class="variable">$2</span>      </span><br><span class="line">        result=1</span><br><span class="line">        oldIFS=<span class="variable">$IFS</span>     </span><br><span class="line">        IFS=<span class="string">&quot;:&quot;</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> directory <span class="keyword">in</span> <span class="variable">$ourpath</span>; <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># If i double quoted `$ourpath`, it will not word split, and the loop will only run once.</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> [ -x <span class="string">&quot;<span class="variable">$directory</span>/<span class="variable">$cmd</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">                        result=0</span><br><span class="line">                <span class="keyword">fi</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line"> </span><br><span class="line">        IFS=<span class="variable">$oldIFS</span></span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$result</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">checkForCmdInPath</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">        var=<span class="variable">$1</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> [ ! <span class="string">&quot;<span class="variable">$var</span>&quot;</span> = <span class="string">&quot;&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">                <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$&#123;var:0:1&#125;</span>&quot;</span> = <span class="string">&quot;/&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">                	<span class="comment"># Checks whether the command represented by the `$var` is an absolute path or not. </span></span><br><span class="line">                        <span class="keyword">if</span> [ ! -x <span class="string">&quot;<span class="variable">$var</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">                                <span class="built_in">return</span> 1</span><br><span class="line">                        <span class="keyword">fi</span></span><br><span class="line">                <span class="keyword">elif</span> ! in_path <span class="string">&quot;<span class="variable">$var</span>&quot;</span> <span class="string">&quot;<span class="variable">$PATH</span>&quot;</span>; <span class="keyword">then</span></span><br><span class="line">                        <span class="built_in">return</span> 2</span><br><span class="line">                <span class="keyword">fi</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Positional-parameters"><a href="#Positional-parameters" class="headerlink" title="Positional parameters"></a>Positional parameters</h3><p>See <a href="/2023/04/29/Positional%20Parameters/">here</a></p>
<blockquote>
<p><strong><em>A Quick Word</em></strong>  </p>
<p>It is good practice to put double quotes around variables in Bash because it prevents word splitting and globbing.</p>
<ul>
<li><p>Word splitting is the process of breaking up a string into separate words based on whitespace. If a variable contains spaces, without quotes, Bash will treat each space-separated word as a separate argument. This can cause unexpected behavior if the variable is used as an argument to a command.</p>
</li>
<li><p>Globbing is the process of expanding wildcard characters such as <code>*</code> and <code>?</code> into a list of matching filenames. If a variable contains a glob character, without quotes, Bash will try to expand it into a list of matching filenames. This can also cause unexpected behavior if the variable is used as an argument to a command.</p>
</li>
</ul>
<p>By putting double quotes around variables, Bash treats the variable as a single argument, preserving any whitespace or glob characters within the variable. This helps to ensure that the variable is interpreted correctly and the script behaves as expected.</p>
</blockquote>
<h3 id="Special-variables"><a href="#Special-variables" class="headerlink" title="Special variables"></a>Special variables</h3><p><strong><em><code>$IFS</code></em></strong></p>
<p>The internal field separator (IFS) is a special variable in Bash that specifies the delimiter used to separate fields in a string. By default, the IFS is set to whitespace (i.e., space, tab, and newline characters).</p>
<p><strong><em>&#96;$?</em></strong></p>
<p>Display the return values of functions.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> $?</span><br></pre></td></tr></table></figure>

<p>You can use it immediately after calling a function with return value.</p>
<h3 id="Slice"><a href="#Slice" class="headerlink" title="Slice"></a>Slice</h3><pre><code>[ &quot;$&#123;var:0:1&#125;&quot; = &quot;/&quot; ];
</code></pre>
<p>The slicing starts at index <code>0</code> and lasts for the duration of a single character.</p>
<h3 id="Compare"><a href="#Compare" class="headerlink" title="Compare"></a>Compare</h3><p><strong><em>String comparison</em></strong></p>
<p><code>=</code> tests if two strings are equal. For example, if <code>[ &quot;$string1&quot; = &quot;$string2&quot; ]</code> would be true if <code>$string1</code> and <code>$string2</code> have the same value.</p>
<p><strong><em>Pattern matching</em></strong></p>
<p><code>==</code> tests if a string matches a pattern using globbing, which is a way to match filenames based on wildcard characters. For example, if <code>[[ &quot;$string&quot; == a* ]]</code> would be true if <code>$string</code> starts with the letter “a”.</p>
]]></content>
      <categories>
        <category>Wicked Cool Shell Scripts</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>ArchLinux</tag>
        <tag>Bash</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Telnet 连接 GreenMail 模拟邮件服务器 (测试 SMTP / IMAP 连接)</title>
    <url>/2023/04/21/%E4%BD%BF%E7%94%A8%20Telnet%20%E8%BF%9E%E6%8E%A5%20GreenMail%20%E6%A8%A1%E6%8B%9F%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8%20(%E6%B5%8B%E8%AF%95%20SMTP%20:%20IMAP%20%E8%BF%9E%E6%8E%A5)/</url>
    <content><![CDATA[<h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a><em>要求</em></h3><ul>
<li><p>GreenMail Standalone</p>
</li>
<li><p>本地 Apache 服务器</p>
</li>
</ul>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a><em>下载</em></h3><ol>
<li><p>从<a href="https://greenmail-mail-test.github.io/greenmail/#download" title="GreenMail Download"> GreenMail 官网</a>直接下载</p>
</li>
<li><p>使用命令行指令下载：</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/user/</span><br><span class="line"></span><br><span class="line">wget https://repo1.maven.org/maven2/com/icegreen/greenmail-standalone/2.1.0-alpha-1/greenmail-standalone-2.1.0-alpha-1.jar</span><br></pre></td></tr></table></figure>

<p>下载完成以后从终端运行<code>.jar</code>文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -Dgreenmail.smtp.timeout=120000 -Dgreenmail.smtp.hostname=0.0.0.0 -Dgreenmail.smtp.port=3025 -Dgreenmail.imap.hostname=0.0.0.0 -Dgreenmail.imap.port=3143 -jar /path/to/file/greenmail-standalone-2.1.0-alpha-1.jar</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>-Dgreenmail.smtp.timeout</code>：为防止 SMTP 服务器超时，把超时时常设置为 120000 毫秒</p>
</blockquote>
<blockquote>
<p><code>-Dgreenmail.smtp.hostname</code>, <code>Dgreenmail.smtp.port</code>：设置 SMTP 地址和端口</p>
</blockquote>
<blockquote>
<p><code>-Dgreenmail.imap.hostname</code>, <code>-Dgreenmail.imap.port</code>：设置 IMAP 地址和端口</p>
</blockquote>
<h3 id="连接-SMTP-服务器"><a href="#连接-SMTP-服务器" class="headerlink" title="连接 SMTP 服务器"></a>连接 SMTP 服务器</h3><p>开启 Telnet 进程，连接到 SMTP 服务器的 3025 端口：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">telent localhost 3025</span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为是模拟握手，所以服务器地址就是本地域名</span></span><br></pre></td></tr></table></figure>

<pre><code>telnet localhost 3025
Trying ::1...
Connected to localhost.
Escape character is &#39;^]&#39;.
220 /0:0:0:0:0:0:0:1 GreenMail SMTP Service v2.1.0-alpha-1 ready
421 Service shutting down and closing transmission channel (socket timeout, SO_TIMEOUT: 30000ms)
</code></pre>
<p>握手成功了！接下里可以输入四字指令和 SMTP 服务器交流：</p>
<pre><code>C: HELO localhost
S: 250-/0:0:0:0:0:0:0:1
   250 AUTH PLAIN LOGIN
C: MAIL FROM: &lt;example@email.com&gt;
S: 250 OK
C: RCPT TO: &lt;example@email.com&gt;
S: 250 OK
C: DATA
S: 354 Start mail input; end with &lt;CRLF&gt;.&lt;CRLF&gt;
C: HELLO THERE
   THIS IS USER SPEAKING
   .
S: 250 OK
C: QUIT
S: 221 /0:0:0:0:0:0:0:1 Service closing transmission channel
   Connection closed by foreign host.
</code></pre>
<p>解释一下这些缩写是什么意思：</p>
<blockquote>
<p><code>HELO</code>: hello</p>
</blockquote>
<blockquote>
<p><code>RCPT</code>: recipient</p>
</blockquote>
<blockquote>
<p><code>CRLF</code>: carriage return &amp; line feed</p>
</blockquote>
<hr>
<h3 id="连接-IMAP-服务器"><a href="#连接-IMAP-服务器" class="headerlink" title="连接 IMAP 服务器"></a>连接 IMAP 服务器</h3><p><strong><em>认证阶段</em></strong></p>
<pre><code>  telnet mailServer 110
  +OK POP3 server ready
  user bob
  +OK
  pass hungry
  +OK user successfully logged on
</code></pre>
<p><strong><em>交易阶段</em></strong></p>
<pre><code>  C: list
  S: 1 498
  S: 2 912
  S: .
  C: retr 1
  S: (blah blah ...
  S: .................
  S: ..........blah)
  S: .
  C: dele 1
  C: retr 2
  S: (blah blah ...
  S: .................
  S: ..........blah)
  S: .
  C: dele 2
  C: quit
  S: +OK POP3 server signing off
</code></pre>
<p>用户在这个阶段可以给邮件添加标记，被添加<strong>删除标记</strong>的邮件将在最后的更新阶段被<strong>删除</strong>。</p>
]]></content>
      <tags>
        <tag>Computer Networking</tag>
      </tags>
  </entry>
  <entry>
    <title>Running ArchLinux ARM in UTM on a M1 MacBook Air</title>
    <url>/2023/04/25/Running%20ArchLinux%20ARM%20in%20UTM%20on%20a%20M1%20MacBook%20Air/</url>
    <content><![CDATA[<blockquote>
<p>ArchLinux is a text-based operating system that does not come with a graphical interface, and all tasks are performed by running commands in the Command Line Interface (CLI).</p>
</blockquote>
<h3 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h3><p>The setting up of UTM and running virtual machines on it is rather simple. Just follow the steps shown below and you’ll be playing around soon enough.</p>
<ol>
<li><p><a href="https://github.com/utmapp/UTM/releases/latest/download/UTM.dmg" title="Download UTM">Download UTM</a></p>
</li>
<li><p><a href="https://mac.getutm.app/gallery/archlinux-arm" title="UTM Gallery - ArchLinux ARM">Click on <em>Open in UTM</em></a> - this automatically redirects you to your newly installed UTM app, where UTM will download the pre-built ArchLinux VM for you.</p>
</li>
<li><p>(Optional) You can run the VM as is, but feel free to tweak with the settings if you want to.</p>
</li>
</ol>
<h3 id="Install-Dependencies"><a href="#Install-Dependencies" class="headerlink" title="Install Dependencies"></a>Install Dependencies</h3><h4 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a><em><code>sudo</code></em></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su -</span><br><span class="line"></span><br><span class="line">pacman -Syu</span><br><span class="line"></span><br><span class="line">pacman -S sudo</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>su</code> is short for “substitute user”, and it is used to switch to another user account in Unix-based operating systems. When you use <code>su</code> without any options, it will switch to the root user account by default.</p>
<p>The <code>-</code> option used with <code>su</code> is used to simulate a full login for the new user, and it is not specific to the root user. When you use <code>su -</code> followed by a username, it will switch to that user’s account with a login shell.</p>
<p>So, to summarize:</p>
<ul>
<li><p><code>su</code> is used to switch to another user account.</p>
</li>
<li><p><code>su</code> without any options will switch to the root user account by default.</p>
</li>
<li><p><code>su -</code> followed by a username will switch to that user’s account with a login shell, simulating a full login for that user.</p>
</li>
</ul>
<hr>
<p><strong><em><code>pacman</code></em></strong></p>
<p><code>pacman</code> is the package manager for Arch Linux, a lightweight and flexible Linux distribution.</p>
<p>With <code>pacman</code>, users can easily install, remove, and update software packages on their Arch Linux system. It uses a binary package format, which means that packages are precompiled and ready to install, making the process faster and more efficient than compiling from source.</p>
<p>Some common <code>pacman</code> options include:</p>
<blockquote>
<p><code>pacman -Syu</code>: <code>-S</code> stands for “sync”, <code>-y</code> and <code>-u</code> are options that tell <code>pacman</code> to refresh the package databases and upgrade all packages, respectively. <code>-Syu</code>, as a whole, updates the system and all installed packages to the latest version.</p>
</blockquote>
<blockquote>
<p><code>pacman -S &lt;package&gt;</code>: <code>-S</code> is a shorthand for <code>--sync</code>. This command installs a package. When <code>--needed</code> option is specified alongside the <code>pacman -S</code> command, only packages that are not already installed on your system get installed.</p>
</blockquote>
<blockquote>
<p><code>pacman -R &lt;package&gt;</code>: <code>-R</code> stands for “remove”. This command removes a package.</p>
</blockquote>
<blockquote>
<p><code>pacman -Ss &lt;searchterm&gt;</code>: <code>-Ss</code> stands for “synchronize&#x2F;search”. This command searches for packages containing the specified search term.</p>
</blockquote>
<blockquote>
<p><code>pacman -Q</code>: <code>-Q</code> stands for “query”. This command lists all installed packages on the system.</p>
</blockquote>
<p><strong><em>Use the following commands with caution!</em></strong></p>
<blockquote>
<p><code>pacman -Sc</code>: Removes all the packages from the cache which are not currently installed on the system. It will only remove packages that are not needed anymore and will not affect any installed packages. This command can be useful to free up disk space on the system.</p>
</blockquote>
<blockquote>
<p><code>pacman -Scc</code>: Removes all the packages from the cache, <strong>including</strong> those that are currently installed on the system. It will remove all the package files from the cache, along with their associated databases. This command can be useful if you want to completely clean the package cache and start fresh.</p>
</blockquote>
<blockquote>
<p><code>pacman -Syy</code>: Forces a refresh of all package databases, <em>even if</em> they are already up to date. This ensures that you have the latest package database information available, which can be useful in situations where the package databases may have become <em>out of sync</em> or <em>corrupted</em>.</p>
</blockquote>
<hr>
<p>Once the installation is complete, we need to configure <code>sudo</code> to allow users to execute commands with administrative privileges. To do this, you need to add the user to the <code>wheel</code> group. Run the following command to add the user to the wheel group:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">usermod -aG wheel &lt;username&gt;</span><br></pre></td></tr></table></figure>

<p>This command is used to add a <code>user</code> to the <code>wheel</code> group, which will give them the ability to perform administrative tasks on the system using the <code>sudo</code> command.</p>
<blockquote>
<p><code>usermod</code>: This is a command-line utility in Unix-based operating systems that is used to modify user account properties. The <code>usermod</code> command allows you to add or remove a user from a group, change a user’s home directory, and modify other user account settings.</p>
</blockquote>
<blockquote>
<p><code>wheel</code>: This is a special group in Unix-based operating systems that is used to control access to administrative tasks. Users who are members of the <code>wheel</code> group are allowed to use the <code>sudo</code> command to execute commands with <code>root</code> privileges.</p>
</blockquote>
<blockquote>
<p><code>-aG</code>: These two options used alongside <code>usermod</code> are used to add a user to a group. Specifically, <code>-a</code> stands for “append”, which means that the user is added to the group without removing them from any other groups they may already be a member of. <code>-G</code> stands for “group”, and is followed by the name of the group to add the user to.</p>
</blockquote>
<hr>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">visudo -f /etc/sudoers</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>visudo</code>: This is a command used in Unix-based operating systems to edit the <code>sudoers</code> file, which controls user access to administrative commands.</p>
</blockquote>
<blockquote>
<p><code>-f</code>: This option is used to specify the file to edit.</p>
</blockquote>
<p><code>visudo</code> uses the system’s default editor to open and edit the <code>sudoers</code> file, which is often <code>vi</code>.</p>
<p>If <code>vi</code> is not your thing, you can always specify which editor to use by pass <code>EDITOR=&lt;editor-name&gt;</code> in front of <code>visudo</code>. You can change the default editor once and for all by change these two environment variables: <code>VISUAL</code> and <code>EDITOR</code>.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> EDITOR=nano</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong><em>Note</em></strong><br>The main difference between the two is that <code>VISUAL</code> is used for visual editors, such as Sublime Text, Atom, or Visual Studio Code, while <code>EDITOR</code> is used for non-visual editors, such as nano, vim, or emacs.</p>
</blockquote>
<p>Let’s add the finishing touch and uncomment the following line in the <code>sudoers</code> file:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%wheel ALL=(ALL:ALL) ALL</span><br></pre></td></tr></table></figure>

<h4 id="SPICE-guest-tools"><a href="#SPICE-guest-tools" class="headerlink" title="SPICE guest tools"></a><em><code>SPICE guest tools</code></em></h4><p><code>SPICE</code> stands for Simple Protocol for Independent Computing Environments. It is a remote computing solution that allows users to access the desktop of a virtual machine or remote system from a client device. <code>SPICE</code> provides a high-performance, low-latency connection that supports a wide range of features, including audio, video, and USB redirection. It is commonly used in virtualization environments, such as those provided by QEMU and KVM, to provide remote access to virtual machines.</p>
<p>However, we’re using it for clipboard sharing. With <code>SPICE guest tools</code> installed, the clipboard will be synced between the guest and the host.</p>
<p>Install the <code>spice-vdagent</code> package by running the following command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S spice-vdagent</span><br></pre></td></tr></table></figure>

<p>Once the installation is complete, start the <code>spice-vdagent</code> service by running the following command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl start spice-vdagentd.service</span><br></pre></td></tr></table></figure>

<p>You can also enable the service to start automatically at boot time by running the following command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> spice-vdagentd.service</span><br></pre></td></tr></table></figure>

<p>However, I wasn’t able to enable it on first try.</p>
<pre><code>The unit files have no installation config (WantedBy=, RequiredBy=, Also=,
Alias= settings in the [Install] section, and DefaultInstance= for template
units). This means they are not meant to be enabled or disabled using systemctl.

Possible reasons for having this kind of units are:

* A unit may be statically enabled by being symlinked from another unit&#39;s
  .wants/ or .requires/ directory.
* A unit&#39;s purpose may be to act as a helper for some other unit which has
  a requirement dependency on it.
* A unit may be started when needed via activation (socket, path, timer,
  D-Bus, udev, scripted systemctl call, ...).
* In case of template units, the unit is meant to be enabled with some
  instance name specified.
</code></pre>
<p>Here are some potential reasons why this error might be occurring and how we can address them:</p>
<blockquote>
<p>The unit file might be missing the <code>[Install]</code> section. Check the <code>spice-vdagentd.service</code> file located in <code>/usr/lib/systemd/system</code> to see if it contains an <code>[Install]</code> section with the appropriate <code>WantedBy</code> or <code>RequiredBy</code> settings. If the section is missing or incomplete, you can add it manually. For example, to enable the service at boot time, you can add the line <code>WantedBy=multi-user.target</code> to the <code>[Install]</code> section.</p>
</blockquote>
<blockquote>
<p>The unit file might be a template unit. Template units are designed to be instantiated with specific instance names and cannot be enabled or disabled directly. Check the <code>spice-vdagentd.service</code> file to see if it contains the <code>DefaultInstance</code> setting in the <code>[Install]</code> section. If it does, you will need to specify an instance name when enabling the service using the <code>systemctl enable</code> command. For example, if the <code>DefaultInstance</code> setting is <code>my-instance</code>, you would run <code>systemctl enable spice-vdagentd@my-instance.service</code>.</p>
</blockquote>
<blockquote>
<p>The unit file might be symlinked from another unit’s <code>.wants/</code> or <code>.requires/</code> directory. Check the contents of these directories located in <code>/etc/systemd/system</code> to see if there are any symlinks pointing to <code>spice-vdagentd.service</code>. If there are, you do not need to enable the service separately as it will be started automatically when the dependent unit is started.</p>
</blockquote>
<p>It’s the first fix for me. My <code>[Install]</code> section had only one line “<code>Also=spice-vdagentd.socket</code>“, so I added a second.</p>
<h4 id="wget"><a href="#wget" class="headerlink" title="wget"></a><em><code>wget</code></em></h4><p>Install the <code>wget</code> command-line tool:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -Syy</span><br><span class="line"></span><br><span class="line"><span class="comment"># Update package database</span></span><br><span class="line"></span><br><span class="line">sudo pacman -S wget</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Note: You may need to <a href="#Refresh-keys">refresh your keychains</a> first!</p>
</blockquote>
<h4 id="git"><a href="#git" class="headerlink" title="git"></a><em><code>git</code></em></h4><p>Install the <code>git</code> package by running the following command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S git</span><br></pre></td></tr></table></figure>

<h4 id="yay"><a href="#yay" class="headerlink" title="yay"></a><em><code>yay</code></em></h4><p>The reason why we’re not installing <code>apt</code> is because <code>apt</code> is a package manager used in Debian-based Linux distributions like Ubuntu, and it is not available in Arch Linux. Instead, Arch Linux uses its own package manager called <code>pacman</code>, the one we just talked about.</p>
<p>If you are familiar with <code>apt</code> and want to use a similar package manager in Arch Linux, you can use <code>yay</code>, which is a popular AUR (Arch User Repository) helper that provides a pacman-like interface with added features.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S base-devel</span><br></pre></td></tr></table></figure>

<p>Install yay by running the following command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://aur.archlinux.org/yay.git</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> yay</span><br><span class="line"></span><br><span class="line">makepkg -si</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>makepkg -si</code> is a command used in Arch Linux to build and install a package from source code.</p>
<blockquote>
<p><code>makepkg</code>: This is a tool that automates the process of building packages from source code in Arch Linux. It creates a package file that can be installed using the package manager.</p>
</blockquote>
<blockquote>
<p><code>-s</code>: A flag that tells <code>makepkg</code> to install any dependencies needed to build the package.</p>
</blockquote>
<blockquote>
<p><code>-i</code>: A flag that tells <code>makepkg</code> to install the package after it has been built.</p>
</blockquote>
<h4 id="neovim"><a href="#neovim" class="headerlink" title="neovim"></a><em><code>neovim</code></em></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S --needed neovim</span><br></pre></td></tr></table></figure>

<h4 id="Create-a-non-root-user"><a href="#Create-a-non-root-user" class="headerlink" title="Create a non-root user"></a>Create a non-root user</h4><p>Before we move on to the next step, we have to create an alternative user apart from our current root, otherwise <code>makepkg -si</code> won’t work.</p>
<p>It’s fairly simple.</p>
<p>To create a non-root user account on Arch Linux, we have to run these few steps:</p>
<p>Run the following command to create a new user account:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">useradd -m -s /bin/bash &lt;username&gt;</span><br></pre></td></tr></table></figure>

<p>Set a password for the new user account:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo passwd &lt;username&gt;</span><br></pre></td></tr></table></figure>

<p>Add the new user to the <code>wheel</code> group to allow them to use <code>sudo</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">usermod -aG wheel &lt;username&gt;</span><br></pre></td></tr></table></figure>

<p>At last, we simply log out of the <code>root</code> user account and log in to the new user account by entering the username and password we just created.</p>
<hr>
<p>Once the installation is complete, you can use <code>yay</code> to search for and install packages from the AUR. For example, to install the firefox package from the AUR, you can run the following command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yay -S firefox</span><br></pre></td></tr></table></figure>

<p>Or if you want to uninstall, run the following command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yay -Rns firefox</span><br></pre></td></tr></table></figure>

<p>This command will remove Firefox and its dependencies (<code>-R</code>), including any configuration files (<code>-n</code>) and any packages that were installed as dependencies and are no longer required (<code>-s</code>).</p>
<p>Now, <code>yay</code> will automatically download and install the package and its dependencies.</p>
<blockquote>
<p><strong><em>Note</em></strong><br>While <code>yay</code> provides a pacman-like interface, it is not a drop-in replacement for <code>apt</code>, and there may be some differences in the way packages are managed and installed.</p>
</blockquote>
<hr>
<h4 id="Refresh-keys"><a href="#Refresh-keys" class="headerlink" title="Refresh keys"></a>Refresh keys</h4><p>PGP keys are used to verify the authenticity of packages in the official Arch Linux repositories.</p>
<p>Update the keyring package by running the following command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -Sy archlinux-keyring</span><br></pre></td></tr></table></figure>

<p>Import the new keys by running the following command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman-key --populate archlinux</span><br></pre></td></tr></table></figure>

<p>Refresh the keyring by running the following command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman-key --refresh-keys</span><br><span class="line"></span><br><span class="line"><span class="comment"># This command retrieves the latest keys from the keyserver and update your keyring accordingly.</span></span><br></pre></td></tr></table></figure>

<p>Now your keychains should be up to date and you should be able to verify the authenticity of packages in the official Arch Linux repositories.</p>
<h4 id="Poweroff"><a href="#Poweroff" class="headerlink" title="Poweroff"></a>Poweroff</h4><p>Once you had your fun, you’d probably want to poweroff. Here’s what you should do:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo poweroff</span><br></pre></td></tr></table></figure>

<p>Or:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo shutdown -h now</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
        <category>ArchLinux</category>
      </categories>
      <tags>
        <tag>ArchLinux</tag>
        <tag>UTM</tag>
        <tag>Virtual Machine</tag>
      </tags>
  </entry>
  <entry>
    <title>`node` in the command line</title>
    <url>/2023/04/28/%60node%60%20in%20the%20command%20line/</url>
    <content><![CDATA[<p>I ran into this hassle the other day when my <code>npm</code> command failed to work in the command line. It took me a while to sort things out and left me in a foul mood. To prevent something like that from happening again, I decided to write this post. Nothing fancy - just some commands that might prove helpful in the long run.</p>
<h3 id="node"><a href="#node" class="headerlink" title="node"></a><em><code>node</code></em></h3><h4 id="Display-global-installation-directory"><a href="#Display-global-installation-directory" class="headerlink" title="Display global installation directory"></a>Display global installation directory</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm root -g</span><br></pre></td></tr></table></figure>

<p>If you installed <code>node</code> using the official package installer, the global installation directory for <code>npm</code> packages would be:</p>
<pre><code>/usr/local/lib/node_modules
</code></pre>
<p>Or you could’ve installed it using Homebrew. In that case, the global installation directory would be:</p>
<pre><code>/opt/homebrew/lib/node_modules
</code></pre>
<h4 id="View-global-installation"><a href="#View-global-installation" class="headerlink" title="View global installation"></a>View global installation</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm <span class="built_in">ls</span> -g</span><br></pre></td></tr></table></figure>

<pre><code>/opt/homebrew/lib
├── @e-hentai/home@1.6.0-alpha.9
├── express-generator@4.16.1
├── nodemon@2.0.22
└── npm@9.6.5
</code></pre>
<h4 id="Update-global-installation"><a href="#Update-global-installation" class="headerlink" title="Update global installation"></a>Update global installation</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm update -g</span><br></pre></td></tr></table></figure>

<h4 id="View-global-configuration"><a href="#View-global-configuration" class="headerlink" title="View global configuration"></a>View global configuration</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config list</span><br></pre></td></tr></table></figure>

<p>The output should be on the lines of this:</p>
<pre><code>; &quot;builtin&quot; config from /opt/homebrew/lib/node_modules/npm/npmrc

prefix = &quot;/opt/homebrew&quot; 

; &quot;user&quot; config from /Users/Mccranky/.npmrc

fetch-retry-maxtimeout = 300000 

; node bin location = /opt/homebrew/Cellar/node/20.0.0/bin/node
; node version = v20.0.0
; npm local prefix = /Users/Mccranky
; npm version = 9.6.5
; cwd = /Users/Mccranky
; HOME = /Users/Mccranky
; Run `npm config ls -l` to show all defaults.
</code></pre>
<p>From it, we can discern a few key instances that might prove helpful.</p>
<blockquote>
<p>“builtin” config is stored at <code>/opt/homebrew/lib/node_modules/npm/npmrc</code></p>
</blockquote>
<blockquote>
<p>“user” config is stored at <code>/Users/Mccranky/.npmrc</code></p>
</blockquote>
<h4 id="Add-x2F-remove-configuration"><a href="#Add-x2F-remove-configuration" class="headerlink" title="Add&#x2F;remove configuration"></a>Add&#x2F;remove configuration</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> &lt;name&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure>

<p>For example, if I want to specify a range of time before timeout occurs, I can use the following command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> fetch-retry-maxtimeout 300000 // 5 minutes</span><br><span class="line"></span><br><span class="line">npm config <span class="built_in">set</span> fetch-retry-mintimeout 60000 // 1 minute</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>The same mechanism applys when it comes to how we delete configurations:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config delete fetch-retry-maxtimeout</span><br><span class="line"></span><br><span class="line">npm config delete fetch-retry-mintimeout</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="express"><a href="#express" class="headerlink" title="express"></a><em><code>express</code></em></h3><p>I’ve only just started dabbling with <code>express</code> and my expertise is cut pretty thin, but the rule of thumb I tend to follow is:</p>
<ol>
<li><p>If you’re installing something that you want to use in <strong>your program</strong> using <code>require(&#39;something&#39;)</code>, then install it locally, at the root of your project.</p>
</li>
<li><p>If you’re installing something that you want to use on the <strong>command line</strong> or something, install it globally, so that its binaries end up in your <code>$PATH</code> environment variable.</p>
</li>
</ol>
<p>Based on this, you would want to install <code>express-generator</code> using the <code>-g</code> flag as you will use it as a command line tool, but you’d want to install <code>express</code> without this flag as it’s a module you will want to <code>require()</code> it in your application.</p>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Express.js</tag>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Hexo 生成静态网页博客</title>
    <url>/2023/04/22/%E4%BD%BF%E7%94%A8%20Hexo%20%E7%94%9F%E6%88%90%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a><em>要求</em></h3><ul>
<li><p>Node.js</p>
</li>
<li><p>Git</p>
</li>
</ul>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a><em>下载</em></h3><ul>
<li><p><a href="https://nodejs.org/dist/v18.15.0/node-v18.15.0.pkg" title="Download Node (LTS)">官网下载 Node.js 安装包</a></p>
</li>
<li><p><a href="https://git-scm.com/downloads" title="Download Git">官网下载 Git</a></p>
</li>
</ul>
<p>– <strong>请注意参考个人电脑的操作系统！</strong></p>
<p>进入 Terminal 查看安装的版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node --version <span class="comment"># v18.16.0</span></span><br><span class="line"></span><br><span class="line">git --version <span class="comment"># git version 2.40.0</span></span><br></pre></td></tr></table></figure>

<h3 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init my-blog</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> my-blog</span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为 hexo 是基于 Node.js 完成的框架，所以完成第一步之后无需再执行 `npm init -y` 生成 package.json 文件</span></span><br><span class="line"></span><br><span class="line">npm i </span><br><span class="line"></span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<p>接着我们去 <code>localhost:4000</code> 就能看到我们的博客了！</p>
<h3 id="项目树状结构图"><a href="#项目树状结构图" class="headerlink" title="项目树状结构图"></a>项目树状结构图</h3><p>我们首先来了解一下我们的项目文件夹下面有些什么：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.landscape.yml</span><br><span class="line">├── _config.yml</span><br><span class="line">├── db.json</span><br><span class="line">├── node_modules</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">├── public</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">├── themes</span><br><span class="line">└── yarn.lock</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="/2023/04/22/%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E9%A1%B9%E7%9B%AE%E6%A0%91%E7%8A%B6%E7%BB%93%E6%9E%84%E5%9B%BE/index.html">如何生成项目树状结构图</a></li>
</ul>
<blockquote>
<p><code>_config.yml</code>：Hexo 博客设置</p>
</blockquote>
<blockquote>
<p><code>node_modules</code>：存放启动需要使用的模组</p>
</blockquote>
<blockquote>
<p><code>public</code>：存放生成的静态网页</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public</span><br><span class="line">├── 2023</span><br><span class="line">├── README.md</span><br><span class="line">├── archives</span><br><span class="line">├── assets</span><br><span class="line">├── css</span><br><span class="line">├── fontawesome</span><br><span class="line">├── fonts</span><br><span class="line">├── images</span><br><span class="line">├── index.html</span><br><span class="line">├── js</span><br><span class="line">├── tags</span><br><span class="line">└── webfonts</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>scaffolds</code>：存放 Hexo 个人博客的 3 种模版：page (白页)，post (博客)，draft (草稿)</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scaffolds</span><br><span class="line">├── draft.md</span><br><span class="line">├── page.md</span><br><span class="line">└── post.md</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>source</code>：存放博客<code>.md</code>文件</p>
</blockquote>
<blockquote>
<p><code>themes</code>：存放<code>Custom</code>主题，从<code>npm</code>下载的主题存放在<code>node_modules</code>里</p>
</blockquote>
<h3 id="第一篇博客"><a href="#第一篇博客" class="headerlink" title="第一篇博客"></a>第一篇博客</h3><p>我们先从草稿开始：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new draft first-draft</span><br></pre></td></tr></table></figure>

<p>Hexo 会帮我们在<code>/source/_drafts/</code>文件夹里创建我们的第一篇草稿。</p>
<p>如果觉得写得差不多了，我们可以：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo publish first-draft</span><br></pre></td></tr></table></figure>

<p>Hexo 会自动帮我们把<code>first-draft.md</code>移动到<code>/source/_posts/</code>文件夹里，这样当我们打开服务器的时候就能看到这篇博客了。</p>
<p>当然我们也可以带参数运行<code>hexo server</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server --draft</span><br></pre></td></tr></table></figure>
<p>这样我们在写草稿时也能看到最终的布局，方便我们对内容排版进行修改。</p>
<h3 id="修改-config-yml文件"><a href="#修改-config-yml文件" class="headerlink" title="修改_config.yml文件"></a>修改<code>_config.yml</code>文件</h3><p>我们可以通过修改设置文件来改变 Hexo 的一些初始行为，比如说在 Writing 一栏里改变<code>default_layout</code>变量的参数可以改变<code>hexo new</code>创建的文件类型。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br></pre></td></tr></table></figure>
<p>这样我们就不用每次<code>hexo new</code>时还需要特地指定创建的文件类型了。</p>
]]></content>
      <tags>
        <tag>Bash</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用 GitHub Pages 托管 Hexo 静态博客网站</title>
    <url>/2023/04/22/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%20GitHub%20Pages%20%E6%89%98%E7%AE%A1%20Hexo%20%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<p>– <strong>请先阅读 <a href="/2023/04/22/%E4%BD%BF%E7%94%A8%20Hexo%20%E7%94%9F%E6%88%90%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5%E5%8D%9A%E5%AE%A2/index.html">使用 Hexo 生成静态网页博客</a>！</strong></p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>首先，我们基于完成的博客<code>.md</code>文件生成静态网页：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /path/to/site/</span><br><span class="line"><span class="comment"># 跑到项目路径目录</span></span><br><span class="line"></span><br><span class="line">hexo generate</span><br><span class="line"><span class="comment"># 生成静态网页，存放与 public 文件夹内</span></span><br></pre></td></tr></table></figure>

<p>接着，我们进入<code>public</code>文件夹。</p>
<pre><code>.
├── node_modules
├── public
├── scaffolds
├── source
└── themes
</code></pre>
<p>因为我们是使用 GitHub Pages 托管，所以我们需要在<code>public</code>文件夹内初始化<code>git</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line"></span><br><span class="line">git branch -m main</span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line">git commit -m <span class="string">&quot;初始化工作&quot;</span></span><br></pre></td></tr></table></figure>

<p>其次，我们还需要在 GitHub 上面建立一个远程仓库，格式<strong>必须</strong>为<code>username.github.io</code>，这是硬性要求。</p>
<h3 id="关联和发布"><a href="#关联和发布" class="headerlink" title="关联和发布"></a>关联和发布</h3><p>我们现在需要关联本地仓库和远程仓库，用例中我们使用<code>https</code>协议，当然也可以使用<code>ssh</code>密钥：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin https://github.com/username/username.github.io.git</span><br><span class="line"></span><br><span class="line">git push origin main</span><br></pre></td></tr></table></figure>

<p>我们还需要更改一下远程仓库的 GitHub Pages 的设置，目的是告知它托管文件的地址：</p>
<div style="display: block; margin-left: auto; margin-right: auto; text-align: center; font-size: 1rem;">
  
<p>  <img src="/2023/04/22/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%20GitHub%20Pages%20%E6%89%98%E7%AE%A1%20Hexo%20%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/images/0001.png" alt="点击 Settings" title="点击 Settings"></p>
  <div>点击 Settings</div>
  <br>

<p>  <img src="/2023/04/22/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%20GitHub%20Pages%20%E6%89%98%E7%AE%A1%20Hexo%20%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/images/0002.png" alt="点击 Pages" title="点击 Pages"></p>
  <div>点击 Pages</div>
  <br>

<p>  <img src="/2023/04/22/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%20GitHub%20Pages%20%E6%89%98%E7%AE%A1%20Hexo%20%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/images/0003.png" alt="修改设置" title="修改设置"></p>
  <div>修改设置</div>
  <br>

</div>

<p>最后，我们访问<code>username.github.io</code>就可以来到我们的博客页了 :)</p>
]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub Pages</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>软件工程 第一周的博客</title>
    <url>/2023/03/22/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%20%E7%AC%AC%E4%B8%80%E5%91%A8%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h3 id="使用Git-VCS的一些小技巧"><a href="#使用Git-VCS的一些小技巧" class="headerlink" title="使用Git VCS的一些小技巧"></a><em>使用Git VCS的一些小技巧</em></h3><p>初始化步骤我就大段省略了，大致就是去 Git 官网下载 Binary Dependencies 然后安装就好了，或者是去安装<code>xcode-command-line-tools</code>，其中<code>git</code>自动包含在里面了。</p>
<p>说白了 Git 就是一个 Distributional VCS ，大体就是结合了 Local VCS和Centralized VCS，因此基本步骤就是本地建立一个 Local Repository，再在 Gitea 上建立一个 Remote Repository，然后把两个库连接一下，最后把本地的改动<code>push</code>到 Remote Repository 就可以了。</p>
<p>先说如何建 Local Repository。</p>
<p>选一处“风水宝地”，一般选择<code>/User/home</code>。然后跑到系统默认的 Terminal Emulator 去（ Windows：PowerShell ），输入一下指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> temp <span class="comment"># 建立temp</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> temp <span class="comment"># 进入</span></span><br><span class="line"></span><br><span class="line">git init <span class="comment"># 初始化 Local Repository</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>做完最后一步会看到 Git 生成了一个<code>.git</code>的隐藏文件夹。千万不要把自己的项目文件扔进去！</p>
<p>初始化完成后，你就可以开始做项目了。等你做完第一个版本，你就可以把项目<code>add</code>到<code>staging area</code>。用如下指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add file.. <span class="comment"># add 后可以加入多个文件</span></span><br></pre></td></tr></table></figure>

<p>然后用<code>git status</code>查看 Local Repository 的状态。如果你看到所有想要<code>staged</code>的文件已经在<code>staging area</code>里面了，就可以上传了。</p>
<blockquote>
<p>eg:</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m “message<span class="string">&quot;</span></span><br></pre></td></tr></table></figure>

<p>最后，我们需要创建一个 Remote Repository，过程如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin git@example.git</span><br></pre></td></tr></table></figure>

<p>然后，我们<code>push</code> Local Repo 到 Remote Repository，过程如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin temp</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Bash</tag>
        <tag>Git</tag>
        <tag>CLI</tag>
        <tag>File Systems</tag>
      </tags>
  </entry>
  <entry>
    <title>如何生成项目树状结构图</title>
    <url>/2023/04/22/%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E9%A1%B9%E7%9B%AE%E6%A0%91%E7%8A%B6%E7%BB%93%E6%9E%84%E5%9B%BE/</url>
    <content><![CDATA[<h3 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h3><ul>
<li><p>Install <code>tree</code> command via Homebrew by running <code>brew install tree</code></p>
</li>
<li><p>run <code>brew</code> to check if Homebrew is currently installed on your computer</p>
</li>
<li><p>if not, run the following to install Homebrew:</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ /bin/bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="Basic-Syntax"><a href="#Basic-Syntax" class="headerlink" title="Basic Syntax"></a>Basic Syntax</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tree [directory-path]</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>[directory-path]</code> is an optional argument that specifies the directory you want to display as a tree structure. If you don’t specify a directory path, tree will display the tree structure for the current directory.</p>
</blockquote>
<p>Here are some useful options you can add to the tree command:</p>
<blockquote>
<p><code>-L</code> <code>[level]</code>: Limit the depth of the tree to <code>[level]</code> directories.</p>
</blockquote>
<blockquote>
<p><code>-I</code> <code>[pattern]</code>: Exclude files and directories that match the <code>[pattern]</code>.</p>
</blockquote>
<blockquote>
<p><code>-P</code> <code>[pattern]</code>: <code>[pattern]</code> is used to match files or directories that you want to include in the output.</p>
</blockquote>
<blockquote>
<p><code>-a</code>: Show hidden files and directories.</p>
</blockquote>
<blockquote>
<p><code>-f</code>: Print the full path prefix for each file or directory.</p>
</blockquote>
<blockquote>
<p><code>-h</code>: Print the size of each file or directory in a human-readable format.</p>
</blockquote>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tree -L 1 -P <span class="string">&quot;source/*&quot;</span> -I <span class="string">&quot;_drafts|_pages&quot;</span> <span class="built_in">source</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span></span><br><span class="line">└── _posts</span><br><span class="line"></span><br><span class="line">2 directories, 0 files</span><br></pre></td></tr></table></figure>

<blockquote>
<p>You can omit the report on the last line with option <code>--noreport</code> if it bothers you.</p>
</blockquote>
]]></content>
      <tags>
        <tag>Bash</tag>
        <tag>CLI</tag>
        <tag>File Systems</tag>
      </tags>
  </entry>
  <entry>
    <title>软件工程 第三周的博客</title>
    <url>/2023/04/07/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%20%E7%AC%AC%E4%B8%89%E5%91%A8%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="简要概述-CTF-OverTheWire-Bandit-Level-24"><a href="#简要概述-CTF-OverTheWire-Bandit-Level-24" class="headerlink" title="简要概述 CTF OverTheWire Bandit Level 24"></a><em>简要概述 CTF OverTheWire Bandit Level 24</em></h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a><em>题目</em></h3><blockquote>
<p>在端口 30002 上有一个守护进程正在监听，如果提供了 bandit24 的密码和一个秘密的 4 位数的数字密码，它将为您提供 bandit25 的密码。除了通过穷举全部 10000 种组合的方式以外，没有其他获得 pincode 的方法，这被称为暴力破解。</p>
</blockquote>
<p>大致思路如下：</p>
<ul>
<li>先写一个<code>script</code>，按要求进行排版输出到<code>stdout</code></li>
<li>把输出的 10000 种组合<code>pipe</code>到<code>netcat</code>监视的<code>localhost:30002</code>进行测试</li>
<li>直接输出到<code>stdout</code>可能会<code>timeout</code>打断进程，所以我们输出到<code>output.txt</code></li>
<li>最后<code>cat</code>文本内容拿到密码</li>
</ul>
<p>先利用<code>ssh</code>连接到<code>bandit.labs.overthewire.org</code>的服务器，端口号<code>2220</code>，为此我们需要<code>bandit24</code>的密码。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh bandit24@bandit.labs.overthewire.org -p 2220</span><br><span class="line"><span class="comment">#					VAfGXJ1PBSsPSnvsjI8p759leLZ9GGar</span></span><br></pre></td></tr></table></figure>

<p>以<code>bandit24</code>进入 Level 24 之后先到系统文件夹<code>/tmp</code>下建立本关的临时文件夹。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tmp; <span class="built_in">mktemp</span> -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># /tmp/tmp.u4oQlmpmWL</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /tmp/tmp.u4oQlmpmWL</span><br><span class="line"></span><br><span class="line"><span class="comment"># bandit24@bandit:/tmp/tmp.u4oQlmpmWL$</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>-d</code>代表<code>directory</code>，即告诉<code>mktemp</code>指令创建的临时文件属性为文件夹</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> script.sh</span><br><span class="line"></span><br><span class="line"><span class="built_in">chmod</span> 777 script.sh</span><br><span class="line"></span><br><span class="line">vim script.sh</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>touch</code>: 创建文件</p>
</blockquote>
<blockquote>
<p><code>chmod</code> - <code>change mode</code>: 改变文档<code>rwx</code>权限</p>
</blockquote>
<ul>
<li><code>r</code> - <code>read</code>: 读取权限<code>status code</code>为 4</li>
<li><code>w</code> - <code>write</code>: 书写权限<code>status code</code>为 2</li>
<li><code>x</code> - <code>execute</code>: 执行权限<code>status code</code>为 1</li>
</ul>
<p>进入文本编辑器之后，选定”插入“模式，按<code>i</code>键</p>
<p>首行书写<code>shebang</code>行，选定使用哪个<code>shell</code>来执行该<code>script</code> - 我们选用<code>bash</code></p>
<p>然后写我们的<code>entity body</code>的代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;0000..9999&#125;; <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line">        <span class="built_in">printf</span> <span class="string">&quot;%s %s\n&quot;</span> <span class="string">&quot;VAfGXJ1PBSsPSnvsjI8p759leLZ9GGar&quot;</span> <span class="string">&quot;<span class="variable">$i</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>除了语法上微小的一点差异，该题的<code>syntax</code>和<code>C</code>的语法很相像，所以不赘述了。</p>
<p>大致格式就是<code>for [ test statement]; do &lt;command&gt;; done</code></p>
<p>编辑结束按<code>ESC</code>键回到普通模式，按<code>:</code>,然后输入指令<code>wq</code>，回车保存并退出。</p>
<p>执行<code>script.sh</code>，并把结果<code>pipe</code>到<code>netcat</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./script.sh | nc localhost 30002 &gt; output.txt</span><br></pre></td></tr></table></figure>

<p>然后<code>cat output.txt</code>读取文本内容，这是其中的一小部分：</p>
<pre>
        Fail! You did not supply enough data. Try again.
        Wrong! Please enter the correct pincode. Try again.
        Fail! You did not supply enough data. Try again.
        Wrong! Please enter the correct pincode. Try again.
        Fail! You did not supply enough data. Try again.
        Wrong! Please enter the correct pincode. Try again.
        Fail! You did not supply enough data. Try again.
        Wrong! Please enter the correct pincode. Try again.
        Fail! You did not supply enough data. Try again.
        Wrong! Please enter the correct pincode. Try again.
        Fail! You did not supply enough data. Try again.
        Wrong! Please enter the correct pincode. Try again.
        Fail! You did not supply enough data. Try again.
        Wrong! Please enter the correct pincode. Try again.
        Fail! You did not supply enough data. Try again.
        Wrong! Please enter the correct pincode. Try again.
        Fail! You did not supply enough data. Try again.
        Correct!
        The password of user bandit25 is p7TaowMYrmu23Ol8hiZh9UvD0O9hpx8d

        Exiting.
</pre>

]]></content>
      <tags>
        <tag>Bash</tag>
        <tag>CTF</tag>
        <tag>OverTheWire</tag>
        <tag>Bandit</tag>
      </tags>
  </entry>
  <entry>
    <title>软件工程 第二周的博客</title>
    <url>/2023/03/29/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%20%E7%AC%AC%E4%BA%8C%E5%91%A8%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h3 id="使用-Node-js-的-Express-js-模组-Host-自己的静态网页"><a href="#使用-Node-js-的-Express-js-模组-Host-自己的静态网页" class="headerlink" title="使用 Node.js 的 Express.js 模组 Host 自己的静态网页"></a><em>使用 Node.js 的 Express.js 模组 Host 自己的静态网页</em></h3><p>首先创建项目文件夹:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">mkdir project01; cd project01</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后创建app.js文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">touch app.js; sudo nano app.js</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>差点忘了，没下载Node.js的先去这个地址下载一下：<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></p>
</blockquote>
<p>下载完初始化一下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">node init -y</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>到生成的package.json文件里 script object 里加个参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">‘start&#x27;：‘node app’</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>好的，非常完美。</p>
<p>然后下载express：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">npm i express --save</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里不建议把它下载为–global，因为会和别的模组冲突。</p>
<p>面对空白页，先导入express模组并初始化app（关于http模组的基础不做赘述，因为用那个太麻烦了）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">const app = require(&#x27;express&#x27;)()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后省略几千字，直接上代码，不懂看注释 : )</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">app.use(express.static(&#x27;./public&#x27;))     // 把静态网页需要的资源全扔 public 文件夹里就好了</span><br><span class="line"></span><br><span class="line">app.all(&#x27;*&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">  res.status(404).send(&#x27;resource not found&#x27;)</span><br><span class="line">&#125;)                                                           // 这个是用来处理404 Bad Request 的</span><br><span class="line"></span><br><span class="line">app.listen(5000, () =&gt; &#123;</span><br><span class="line">  console.log(&#x27;server is listening on port 5000....&#x27;)</span><br><span class="line">&#125;)                                                          // 这个是选择端口</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>最后在 console 里输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">npm start</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>完成！唯一的问题是我们用的还是 localhost， 也就是只有自己可以在端口 5000 看到自己的网页。</p>
<p>想让别人看到的话就去使用 Git Pages 的免费服务。</p>
<p>是不是很简单，开自己动手试一试吧！</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>Node.js</tag>
        <tag>Express.js</tag>
      </tags>
  </entry>
  <entry>
    <title>软件工程 第四周的博客</title>
    <url>/2023/04/14/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%20%E7%AC%AC%E5%9B%9B%E5%91%A8%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="简要概述-CTF-OverTheWire-Bandit-Level-25"><a href="#简要概述-CTF-OverTheWire-Bandit-Level-25" class="headerlink" title="简要概述 CTF OverTheWire Bandit Level 25"></a><em>简要概述 CTF OverTheWire Bandit Level 25</em></h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a><em>题目</em></h3><blockquote>
<p>从<code>bandit25</code>登录到<code>bandit26</code>，用户<code>bandit26</code>的<code>shell</code>不是<code>/bin/bash</code>，而是其他东西。找出它是什么，它是如何工作的，以及如何打破它。</p>
</blockquote>
<hr>
<p>先利用<code>ssh</code>连接到<code>bandit.labs.overthewire.org</code>的服务器，端口号<code>2220</code>，为此我们需要<code>bandit25</code>的密码。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh bandit25@bandit.labs.overthewire.org -p 2220</span><br><span class="line"><span class="comment">#					p7TaowMYrmu23Ol8hiZh9UvD0O9hpx8d</span></span><br></pre></td></tr></table></figure>

<p>以<code>bandit25</code>进入 Level 25 之后先列举<code>/home/bandit25</code>有什么可以帮助通关的东西：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find . -maxdepth 1 -<span class="built_in">exec</span> file &#123;&#125; 2&gt;/dev/null \;</span><br></pre></td></tr></table></figure>
<pre><code>    .: directory
    ./.bash_logout: ASCII text
    ./.bashrc: ASCII text
    ./bandit26.sshkey: PEM RSA private key
    ./.profile: ASCII text
    ./.pin: ASCII text, with no line terminators
    ./.bandit24.password: ASCII text
</code></pre>
<blockquote>
<p><code>find</code>: 查找指令</p>
</blockquote>
<blockquote>
<p><code>.</code></p>
</blockquote>
<blockquote>
<p><code>-maxdepth 1</code>: 类似于<code>lodash.js</code>中的<code>flattenDepth</code>的功能，用于拓展平铺树状结构，<code>1</code>代表一层</p>
</blockquote>
<blockquote>
<p><code>-exec &lt;...&gt; \;</code>: 代表执行，和<code>ps</code>，<code>kill</code>，<code>id</code>，<code>stat</code>属于一类指令，多用于管理系统进程，这里我图方便用来替代<code>for</code>用一下。注意一定要在运行完<code>&lt;...&gt;</code>用<code>;</code>结束进程，<code>;</code>前面用<code>\</code>取消原本的意义</p>
</blockquote>
<blockquote>
<p><code>file</code>: 查询文件类型，<code>&#123;&#125;</code>是<code>placeholder</code>，和 HTML 里的那个<code>placeholder</code>一个意思</p>
</blockquote>
<blockquote>
<p><code>2&gt;/dev/null</code>: <code>2</code>是报错信息的<code>status code</code>，<code>/dev/null</code>是系统的<code>bit dump</code>，因此这句的完整的意思就是不让报错信息输出到<code>stdout</code></p>
</blockquote>
<p>很明显<code>bandit26.sshkey</code>有用，是<code>bandit26</code>的 SSH 密钥。</p>
<p>我们就用它来连接<code>bandit26</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -i bandit26.sshkey -p 2220 bandit26@localhost</span><br></pre></td></tr></table></figure>

<p><code>-i</code>代表<code>identifier</code>，就是身份验证</p>
<p>接着，在<code>handshake</code>阶段选’yes’</p>
<p>然后，我们就被踢出来了。。。</p>
<pre>
  _                     _ _ _   ___   __  
 | |                   | (_) | |__ \ / /  
 | |__   __ _ _ __   __| |_| |_   ) / /_  
 | '_ \ / _` | '_ \ / _` | | __| / / '_ \ 
 | |_) | (_| | | | | (_| | | |_ / /| (_) |
 |_.__/ \__,_|_| |_|\__,_|_|\__|____\___/ 
Connection to localhost closed.
</pre>

<p>不急，去看看<code>bandit26</code>的用户信息。</p>
<blockquote>
<p>在类Unix系统中(包括GNU - GNU’s Not Unix，也就是Linux)，用户信息在系统文件<code>/etc/passwd</code>里 - 这是常识，要记住！</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/passwd | grep <span class="string">&quot;bandit26&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bandit26:x:11026:11026:bandit level 26:/home/bandit26:/usr/bin/showtext</span></span><br></pre></td></tr></table></figure>

<p>先不用管别的，我们要找的是最后一列，也就是代表每个用户的初始<code>shell</code>。</p>
<p>一开始有说过，<code>bandit26</code>用的<code>shell</code>不是<code>bash</code>，是别的东西。众所周知，因为<code>shell</code>负责翻译所有的指令成机码并输出给<code>kernel</code>执行，所以<code>shell</code>是开启终端进程时运行的第一个程序。因此，我们登陆不上<code>bandit26</code>肯定和这个用户修改了他的<code>default shell</code>有关。</p>
<p>先<code>cat /usr/bin/showtext</code>看一下他的初始<code>shell</code>是什么。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> TERM=linux</span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> more ~/text.txt</span><br><span class="line"><span class="built_in">exit</span> 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>好家伙，改了个参数，打印了个图标就退出了，怪不得登录不上。</p>
<p>不过因为<code>bandit26</code>用的是<code>more</code>指令，而<code>more</code>指令如果在一个窗口里打印不出文本就会卡壳，我们可以钻这个漏洞，就是把窗口缩到特别小，然后再尝试登陆。</p>
<p>完美，它卡了。。。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   _                     _ _ _   ___ </span></span><br><span class="line"><span class="comment">#   __  </span></span><br><span class="line"><span class="comment">#  | |                   | (_) | |__ \</span></span><br><span class="line"><span class="comment">#  / /  </span></span><br><span class="line"><span class="comment"># --More--(33%)</span></span><br></pre></td></tr></table></figure>

<p>我们可以在<code>more</code>的窗口里用<code>!</code>加任何指令开启一个<code>subshell</code>，也可以直接<code>v</code>打开<code>vim</code>编辑器。</p>
<p>我们选择后者。</p>
<p>进入<code>vim</code>之后按老规矩先<code>ESC</code>进入普通模式，然后按<code>:</code>键，跟在后面输入指令就可以改<code>shell</code>了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> shell=/bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改成bash</span></span><br><span class="line"></span><br><span class="line">shell</span><br><span class="line"></span><br><span class="line"><span class="comment"># 刷新并重新登陆</span></span><br></pre></td></tr></table></figure>

<p>我们现在应该是以<code>bandit26</code>的身份登陆了。</p>
<p>然后需要做的就是去取下一关的密码了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/bandit_pass/bandit26</span><br><span class="line"><span class="comment"># c7GvcKlw9mC7aUQaPx7nwFstuAIBw1o1</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Bash</tag>
        <tag>CTF</tag>
        <tag>OverTheWire</tag>
        <tag>Bandit</tag>
      </tags>
  </entry>
</search>
